// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RRULE –ø—Ä–∞–≤–∏–ª Google Calendar
export interface RecurrenceInfo {
  isRecurring: boolean;
  type: string;
  frequency: string;
  icon: string;
  description: string;
  days?: string[];
  interval?: number;
  count?: number;
  until?: Date;
  weekStart?: string;
  bySetPos?: number[];
  byMonth?: number[];
  byMonthDay?: number[];
  byYearDay?: number[];
  byWeekNo?: number[];
  byHour?: number[];
  byMinute?: number[];
  bySecond?: number[];
}

export class RRuleParser {
  private static readonly DAY_MAP: { [key: string]: string } = {
    'MO': '–ü–Ω',
    'TU': '–í—Ç',
    'WE': '–°—Ä',
    'TH': '–ß—Ç',
    'FR': '–ü—Ç',
    'SA': '–°–±',
    'SU': '–í—Å'
  };

  private static readonly DAY_MAP_FULL: { [key: string]: string } = {
    'MO': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'TU': '–≤—Ç–æ—Ä–Ω–∏–∫',
    'WE': '—Å—Ä–µ–¥–∞',
    'TH': '—á–µ—Ç–≤–µ—Ä–≥',
    'FR': '–ø—è—Ç–Ω–∏—Ü–∞',
    'SA': '—Å—É–±–±–æ—Ç–∞',
    'SU': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
  };

  private static readonly MONTH_MAP: { [key: number]: string } = {
    1: '—è–Ω–≤–∞—Ä—å', 2: '—Ñ–µ–≤—Ä–∞–ª—å', 3: '–º–∞—Ä—Ç', 4: '–∞–ø—Ä–µ–ª—å',
    5: '–º–∞–π', 6: '–∏—é–Ω—å', 7: '–∏—é–ª—å', 8: '–∞–≤–≥—É—Å—Ç',
    9: '—Å–µ–Ω—Ç—è–±—Ä—å', 10: '–æ–∫—Ç—è–±—Ä—å', 11: '–Ω–æ—è–±—Ä—å', 12: '–¥–µ–∫–∞–±—Ä—å'
  };

  static parseRRule(rrule: string): RecurrenceInfo {
    if (!rrule || !rrule.startsWith('RRULE:')) {
      return {
        isRecurring: false,
        type: 'single',
        frequency: '',
        icon: '',
        description: ''
      };
    }

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å RRULE: –∏ –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const ruleString = rrule.replace('RRULE:', '');
    const params = this.parseRRuleParams(ruleString);

    const freq = params.FREQ;
    const interval = parseInt(params.INTERVAL || '1');
    const byDay = params.BYDAY;
    const count = params.COUNT ? parseInt(params.COUNT) : undefined;
    const until = params.UNTIL ? this.parseUntilDate(params.UNTIL) : undefined;
    const weekStart = params.WKST;

    switch (freq) {
      case 'DAILY':
        return this.parseDailyRule(params, interval, count, until);
      case 'WEEKLY':
        return this.parseWeeklyRule(params, interval, byDay, count, until, weekStart);
      case 'MONTHLY':
        return this.parseMonthlyRule(params, interval, count, until);
      case 'YEARLY':
        return this.parseYearlyRule(params, interval, count, until);
      default:
        return {
          isRecurring: true,
          type: 'custom',
          frequency: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
          icon: '‚öôÔ∏è',
          description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'
        };
    }
  }

  private static parseRRuleParams(ruleString: string): { [key: string]: string } {
    const params: { [key: string]: string } = {};
    const parts = ruleString.split(';');

    for (const part of parts) {
      const [key, value] = part.split('=');
      if (key && value) {
        params[key.trim()] = value.trim();
      }
    }

    return params;
  }

  private static parseUntilDate(until: string): Date {
    // UNTIL –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –∏–ª–∏ YYYYMMDDTHHMMSSZ
    if (until.includes('T')) {
      // –§–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
      return new Date(until.replace(/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})Z?/, '$1-$2-$3T$4:$5:$6Z'));
    } else {
      // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
      return new Date(until.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
    }
  }

  private static parseDays(byDay: string): string[] {
    if (!byDay) return [];

    return byDay.split(',').map(day => {
      // –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ 1MO, -1FR
      const cleanDay = day.replace(/^-?\d+/, '');
      return this.DAY_MAP[cleanDay];
    }).filter(Boolean);
  }

  private static parseDailyRule(params: any, interval: number, count?: number, until?: Date): RecurrenceInfo {
    const byDay = params.BYDAY;
    const days = this.parseDays(byDay);

    let frequency = '';
    let description = '';

    if (interval === 1) {
      if (days.length === 0) {
        frequency = '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ';
      } else if (days.length === 5 && !days.includes('–°–±') && !days.includes('–í—Å')) {
        frequency = '–ü–æ –±—É–¥–Ω—è–º';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)';
      } else if (days.length === 2 && days.includes('–°–±') && days.includes('–í—Å')) {
        frequency = '–ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º (–°–±-–í—Å)';
      } else {
        frequency = '–ü–æ –¥–Ω—è–º';
        description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤: ${days.join(', ')}`;
      }
    } else {
      frequency = `–ö–∞–∂–¥—ã–µ ${interval} –¥–Ω—è`;
      description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${interval} –¥–Ω—è`;
      if (days.length > 0) {
        description += ` –≤: ${days.join(', ')}`;
      }
    }

    if (count) {
      description += ` (${count} —Ä–∞–∑)`;
    } else if (until) {
      description += ` (–¥–æ ${until.toLocaleDateString('ru-RU')})`;
    }

    return {
      isRecurring: true,
      type: 'daily',
      frequency,
      icon: 'üìÖ',
      description,
      days,
      interval,
      count,
      until
    };
  }

  private static parseWeeklyRule(params: any, interval: number, byDay?: string, count?: number, until?: Date, weekStart?: string): RecurrenceInfo {
    const days = this.parseDays(byDay || '');

    let frequency = '';
    let description = '';

    if (interval === 1) {
      if (days.length === 0) {
        frequency = '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ';
      } else if (days.length === 1) {
        frequency = days[0];
        description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π ${this.DAY_MAP_FULL[this.getKeyByValue(this.DAY_MAP, days[0])]}`;
      } else if (days.length === 7) {
        frequency = '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏';
      } else if (days.length === 5 && !days.includes('–°–±') && !days.includes('–í—Å')) {
        frequency = '–ë—É–¥–Ω–∏';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)';
      } else if (days.length === 2 && days.includes('–°–±') && days.includes('–í—Å')) {
        frequency = '–í—ã—Ö–æ–¥–Ω—ã–µ';
        description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º (–°–±-–í—Å)';
      } else {
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–Ω–∏
        frequency = days.join(',');
        description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ: ${days.join(', ')}`;
      }
    } else {
      frequency = `–ö–∞–∂–¥—ã–µ ${interval} –Ω–µ–¥`;
      description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${interval} –Ω–µ–¥–µ–ª–∏`;
      if (days.length > 0) {
        description += ` –ø–æ: ${days.join(', ')}`;
      }
    }

    if (weekStart) {
      description += ` (–Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ${this.DAY_MAP_FULL[weekStart]})`;
    }

    if (count) {
      description += ` (${count} —Ä–∞–∑)`;
    } else if (until) {
      description += ` (–¥–æ ${until.toLocaleDateString('ru-RU')})`;
    }

    return {
      isRecurring: true,
      type: 'weekly',
      frequency,
      icon: 'üìÜ',
      description,
      days,
      interval,
      count,
      until,
      weekStart
    };
  }

  private static parseMonthlyRule(params: any, interval: number, count?: number, until?: Date): RecurrenceInfo {
    const byDay = params.BYDAY;
    const byMonthDay = params.BYMONTHDAY;
    const bySetPos = params.BYSETPOS;

    let frequency = '';
    let description = '';

    if (interval === 1) {
      frequency = '–ï–∂–µ–º–µ—Å—è—á–Ω–æ';
      description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ';
    } else {
      frequency = `–ö–∞–∂–¥—ã–µ ${interval} –º–µ—Å`;
      description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${interval} –º–µ—Å—è—Ü–∞`;
    }

    if (byMonthDay) {
      description += ` ${byMonthDay}-–≥–æ —á–∏—Å–ª–∞`;
    } else if (byDay && bySetPos) {
      const days = this.parseDays(byDay);
      const pos = parseInt(bySetPos);
      const posText = pos === 1 ? '–ø–µ—Ä–≤—ã–π' : pos === 2 ? '–≤—Ç–æ—Ä–æ–π' : pos === 3 ? '—Ç—Ä–µ—Ç–∏–π' : pos === 4 ? '—á–µ—Ç–≤–µ—Ä—Ç—ã–π' : pos === -1 ? '–ø–æ—Å–ª–µ–¥–Ω–∏–π' : `${pos}-–π`;
      description += ` –≤ ${posText} ${days[0]?.toLowerCase() || '–¥–µ–Ω—å'} –º–µ—Å—è—Ü–∞`;
    } else if (byDay) {
      const days = this.parseDays(byDay);
      description += ` –ø–æ: ${days.join(', ')}`;
    }

    if (count) {
      description += ` (${count} —Ä–∞–∑)`;
    } else if (until) {
      description += ` (–¥–æ ${until.toLocaleDateString('ru-RU')})`;
    }

    return {
      isRecurring: true,
      type: 'monthly',
      frequency,
      icon: 'üóìÔ∏è',
      description,
      days: byDay ? this.parseDays(byDay) : undefined,
      interval,
      count,
      until
    };
  }

  private static parseYearlyRule(params: any, interval: number, count?: number, until?: Date): RecurrenceInfo {
    const byMonth = params.BYMONTH;
    const byMonthDay = params.BYMONTHDAY;

    let frequency = '';
    let description = '';

    if (interval === 1) {
      frequency = '–ï–∂–µ–≥–æ–¥–Ω–æ';
      description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –µ–∂–µ–≥–æ–¥–Ω–æ';
    } else {
      frequency = `–ö–∞–∂–¥—ã–µ ${interval} –ª–µ—Ç`;
      description = `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${interval} –ª–µ—Ç`;
    }

    if (byMonth && byMonthDay) {
      const month = this.MONTH_MAP[parseInt(byMonth)];
      description += ` ${byMonthDay} ${month}`;
    } else if (byMonth) {
      const month = this.MONTH_MAP[parseInt(byMonth)];
      description += ` –≤ ${month}`;
    }

    if (count) {
      description += ` (${count} —Ä–∞–∑)`;
    } else if (until) {
      description += ` (–¥–æ ${until.toLocaleDateString('ru-RU')})`;
    }

    return {
      isRecurring: true,
      type: 'yearly',
      frequency,
      icon: 'üìä',
      description,
      interval,
      count,
      until
    };
  }

  private static getKeyByValue(object: { [key: string]: string }, value: string): string {
    return Object.keys(object).find(key => object[key] === value) || '';
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
  static analyzeRecurringInstance(event: any): RecurrenceInfo {
    if (event.recurringEventId) {
      return {
        isRecurring: true,
        type: 'instance',
        frequency: '–≠–∫–∑–µ–º–ø–ª—è—Ä',
        icon: 'üîÅ',
        description: '–≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Å–æ–±—ã—Ç–∏—è'
      };
    }

    return {
      isRecurring: false,
      type: 'single',
      frequency: '',
      icon: '',
      description: ''
    };
  }
}
