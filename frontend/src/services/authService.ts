import api from './api';

export interface User {
  id: string;
  email: string;
  name: string;
  picture: string;
}

export interface AuthResponse {
  access_token: string;
  refresh_token: string;
  user_info: User;
}

class AuthService {
  private tokenRefreshPromise: Promise<boolean> | null = null;
  private authCheckPromise: Promise<boolean> | null = null;
  private lastAuthCheck: number = 0;
  private authCheckCacheTime: number = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∞
  private lastAuthResult: boolean = false;

  // –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è Google OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  getGoogleAuthUrl(): string {
    return `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/google/`;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Google OAuth
  async handleGoogleCallback(code: string): Promise<AuthResponse> {
    console.log('AuthService: Sending callback request to backend');
    console.log('API URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/google/callback`);
    console.log('Payload:', { code });

    const response = await api.post('/google/callback', { code });
    const authData = response.data;

    console.log('AuthService: Response received:', authData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    if (authData.access_token) {
      localStorage.setItem('access_token', authData.access_token);
      console.log('AuthService: Access token saved');
    }

    if (authData.refresh_token) {
      localStorage.setItem('refresh_token', authData.refresh_token);
      console.log('AuthService: Refresh token saved');
    }

    // –ï—Å–ª–∏ user_info –Ω–µ –ø—Ä–∏—à–µ–ª –≤ –æ—Ç–≤–µ—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    let userInfo = authData.user_info;
    if (!userInfo) {
      console.log('AuthService: User info not in response, fetching separately...');
      try {
        userInfo = await this.getCurrentUser();
        console.log('AuthService: User info fetched separately:', userInfo);
      } catch (error) {
        console.error('AuthService: Failed to fetch user info:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    if (userInfo) {
      localStorage.setItem('user_info', JSON.stringify(userInfo));
      console.log('AuthService: User info saved');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const saved = localStorage.getItem('user_info');
      if (!saved) {
        console.error('AuthService: Failed to save user_info to localStorage!');
      } else {
        console.log('AuthService: User info save verified');
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('AuthService: Final verification:');
    console.log('- access_token saved:', !!localStorage.getItem('access_token'));
    console.log('- refresh_token saved:', !!localStorage.getItem('refresh_token'));
    console.log('- user_info saved:', !!localStorage.getItem('user_info'));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ App
    window.dispatchEvent(new Event('authStateChanged'));

    return {
      access_token: authData.access_token,
      refresh_token: authData.refresh_token,
      user_info: userInfo
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getCurrentUser(): Promise<User> {
    const response = await api.get('/auth/me');
    return response.data;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æÔøΩÔøΩ—Ç—É–ø–∞
  getAccessToken(): string | null {
    return localStorage.getItem('access_token');
  }

  // –ü–æ–ª—É—á–∏—Ç—å refresh —Ç–æ–∫–µ–Ω
  getRefreshToken(): string | null {
    return localStorage.getItem('refresh_token');
  }

  // –û–±–Ω–æ–≤–∏—Ç—å access —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è refresh —Ç–æ–∫–µ–Ω
  async refreshAccessToken(): Promise<boolean> {
    const refreshToken = this.getRefreshToken();
    if (!refreshToken) {
      console.warn('No refresh token found');
      return false;
    }

    try {
      console.log('Attempting to refresh access token...');
      const response = await api.post('/auth/refresh', {
        refresh_token: refreshToken
      });

      const { access_token, refresh_token: newRefreshToken } = response.data;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      localStorage.setItem('access_token', access_token);
      if (newRefreshToken) {
        localStorage.setItem('refresh_token', newRefreshToken);
      }

      console.log('Access token refreshed successfully');
      return true;
    } catch (error: any) {
      console.error('Failed to refresh access token:', error);
      console.error('Refresh error status:', error.response?.status);
      console.error('Refresh error data:', error.response?.data);

      // –ù–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—É—Å—Ç—å App.tsx —Ä–µ—à–∞–µ—Ç
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
  async ensureValidToken(): Promise<boolean> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.tokenRefreshPromise) {
      return this.tokenRefreshPromise;
    }

    const accessToken = this.getAccessToken();
    if (!accessToken) {
      return false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
      const isValid = await this.validateToken();
      if (isValid) {
        return true;
      }

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
      console.log('Access token is invalid, attempting refresh...');
      this.tokenRefreshPromise = this.refreshAccessToken();
      const refreshResult = await this.tokenRefreshPromise;
      this.tokenRefreshPromise = null;
      
      return refreshResult;
    } catch (error) {
      console.error('Error ensuring valid token:', error);
      this.tokenRefreshPromise = null;
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
  async validateToken(): Promise<boolean> {
    try {
      const response = await api.get('/auth/validate');
      return response.status === 200;
    } catch (error: any) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      if (error.response?.status === 401) {
        console.log('Token expired, needs refresh');
        return false;
      }
      console.error('Token validation error:', error);
      return false;
    }
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async isAuthenticatedAsync(): Promise<boolean> {
    console.log('AuthService.isAuthenticatedAsync() called');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ)
    const now = Date.now();
    if (now - this.lastAuthCheck < this.authCheckCacheTime) {
      console.log('AuthService.isAuthenticatedAsync() - returning cached result:', this.lastAuthResult);
      return this.lastAuthResult;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Promise
    if (this.authCheckPromise) {
      console.log('AuthService.isAuthenticatedAsync() - auth check in progress, waiting...');
      return this.authCheckPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Promise –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.authCheckPromise = this.performAuthCheck();
    const result = await this.authCheckPromise;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
    this.lastAuthCheck = now;
    this.lastAuthResult = result;
    this.authCheckPromise = null;

    return result;
  }

  private async performAuthCheck(): Promise<boolean> {
    const token = this.getAccessToken();
    const userInfo = this.getSavedUserInfo();

    console.log('AuthService.performAuthCheck() - token exists:', !!token);
    console.log('AuthService.performAuthCheck() - userInfo exists:', !!userInfo);

    if (!token || !userInfo) {
      console.log('AuthService.performAuthCheck() - missing token or userInfo, returning false');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const isValid = await this.ensureValidToken();
    console.log('AuthService.performAuthCheck() - token validity:', isValid);
    return isValid;
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  isAuthenticated(): boolean {
    const token = this.getAccessToken();
    const userInfo = this.getSavedUserInfo();

    console.log('AuthService.isAuthenticated() check:');
    console.log('- Access token:', token ? 'exists' : 'missing');
    console.log('- User info:', userInfo ? 'exists' : 'missing');
    console.log('- localStorage access_token:', localStorage.getItem('access_token'));
    console.log('- localStorage user_info:', localStorage.getItem('user_info'));

    return !!(token && userInfo);
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏ÔøΩÔøΩ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  clearAuthCache(): void {
    this.lastAuthCheck = 0;
    this.lastAuthResult = false;
    this.authCheckPromise = null;
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    console.log('üî¥ AuthService.logout() called!');
    console.trace('Stack trace for logout call');

    this.clearAuthCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à

    try {
      await api.post('/auth/logout');
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      // –û—á–∏—â–∞–µ–º localStorage –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      console.log('üî¥ Removing tokens from localStorage...');
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      localStorage.removeItem('user_info');
      localStorage.removeItem("calendar_webhook_configured")
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  getSavedUserInfo(): User | null {
    try {
      const userInfo = localStorage.getItem('user_info');
      console.log('AuthService.getSavedUserInfo():');
      console.log('- Raw user_info from localStorage:', userInfo);

      if (!userInfo || userInfo.trim() === '') {
        console.warn('No user info found in localStorage');
        return null;
      }

      const parsed = JSON.parse(userInfo);
      console.log('- Parsed user info:', parsed);
      return parsed;
    } catch (error) {
      console.error('Error parsing user info from localStorage:', error);
      // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem('user_info');
      return null;
    }
  }
}

export const authService = new AuthService();
