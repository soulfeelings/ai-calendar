import api from './api';
import cacheService from './cacheService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º
export interface RecurrenceSuggestion {
  rrule?: string;           // –Ω–∞–ø—Ä–∏–º–µ—Ä: FREQ=WEEKLY;BYDAY=MO,WE
  days_of_week?: string[];  // MO,TU,WE,TH,FR,SA,SU
  frequency?: string;       // daily|weekly|monthly|yearly
  interval?: number;        // —à–∞–≥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
  until?: string;           // ISO 8601
}

export interface ScheduleChange {
  id: string;
  action: string;
  title: string;
  reason: string;
  new_start?: string;
  new_end?: string;
  priority?: string;
  recurrence?: RecurrenceSuggestion; // –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
}

export interface CalendarAnalysis {
  summary: string;
  schedule_changes: ScheduleChange[];
  recommendations: string[];
  productivity_score?: number;
  goal_alignment?: string;
}

export interface SmartGoal {
  id?: string;
  title: string;
  description: string;
  deadline?: string;
  priority?: string | number;
  status?: string;
  smart_analysis?: any; // –†–µ–∑—É–ª—å—Ç–∞—Ç SMART –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò
}

export interface CalendarAnalysisRequest {
  calendar_events: any[];
  user_goals?: SmartGoal[];
  analysis_period_days?: number;
  goals?: string[];
  context?: string;
}

export interface GoalAnalysis {
  is_smart: boolean;
  score: number; // –æ—Ç 0 –¥–æ 100
  analysis: {
    specific: { score: number; feedback: string };
    measurable: { score: number; feedback: string };
    achievable: { score: number; feedback: string };
    relevant: { score: number; feedback: string };
    time_bound: { score: number; feedback: string };
  };
  suggestions: string[];
  improved_goal?: {
    title: string;
    description: string;
    specific: string;
    measurable: string;
    achievable: string;
    relevant: string;
    time_bound: string;
  };
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
export interface TaskResponse {
  task_id: string;
  status: string;
  message: string;
  user_id: string;
}

export interface TaskStatus {
  task_id: string;
  state: 'PENDING' | 'PROGRESS' | 'SUCCESS' | 'FAILURE';
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  message: string;
  progress?: number;
  result?: any;
  error?: string;
}

class AIService {
  private readonly AI_CACHE_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  private readonly POLLING_INTERVAL = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
  private readonly MAX_POLLING_TIME = 300000; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –ò–ò (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ Celery)
   */
  async analyzeCalendarAsync(
    requestData: CalendarAnalysisRequest,
    forceRefresh: boolean = false,
    onProgress?: (status: TaskStatus) => void
  ): Promise<CalendarAnalysis> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!forceRefresh) {
        const cachedResult = cacheService.getByData<CalendarAnalysis>(requestData);
        if (cachedResult) {
          console.log('üìã Using cached AI analysis');
          return cachedResult;
        }
      }

      console.log('ü§ñ Starting async AI analysis...');
      console.log('Sending analysis request:', requestData);

      // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
      const taskResponse = await api.post('/ai/analyze-calendar', requestData);
      const taskId = taskResponse.data.task_id;

      console.log('üìã Analysis task started:', taskId);

      // 2. –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      const result = await this.pollTaskStatus(taskId, onProgress);

      // 3. –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.analysis) {
        cacheService.setByData(requestData, result.analysis, this.AI_CACHE_TTL);
        return result.analysis;
      }

      throw new Error('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');

    } catch (error: any) {
      console.error('Error analyzing calendar:', error);
      throw this.handleAPIError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–ª—É—á–∞–µ–≤)
   */
  async analyzeCalendarSync(
    requestData: CalendarAnalysisRequest,
    forceRefresh: boolean = false
  ): Promise<CalendarAnalysis> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (!forceRefresh) {
        const cachedResult = cacheService.getByData<CalendarAnalysis>(requestData);
        if (cachedResult) {
          console.log('üìã Using cached AI analysis');
          return cachedResult;
        }
      }

      console.log('ü§ñ Requesting sync AI analysis...');
      const response = await api.post('/ai/analyze-calendar-sync', requestData);

      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      cacheService.setByData(requestData, response.data, this.AI_CACHE_TTL);

      return response.data;
    } catch (error: any) {
      console.error('Error in sync calendar analysis:', error);
      throw this.handleAPIError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
   */
  async planGoalAsync(
    requestData: any,
    onProgress?: (status: TaskStatus) => void
  ): Promise<any> {
    try {
      console.log('üéØ Starting async goal planning...');

      // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
      const taskResponse = await api.post('/ai/plan-goal', requestData);
      const taskId = taskResponse.data.task_id;

      console.log('üìã Goal planning task started:', taskId);

      // 2. –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const result = await this.pollTaskStatus(taskId, onProgress);

      return result.suggestion || result;

    } catch (error: any) {
      console.error('Error planning goal:', error);
      throw this.handleAPIError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–ª–∏');
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
   */
  async planGoalSync(requestData: any): Promise<any> {
    try {
      console.log('üéØ Requesting sync goal planning...');
      const response = await api.post('/ai/plan-goal-sync', requestData);
      return response.data;
    } catch (error: any) {
      console.error('Error in sync goal planning:', error);
      throw this.handleAPIError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–ª–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
   */
  async getTaskStatus(taskId: string): Promise<TaskStatus> {
    try {
      const response = await api.get(`/ai/task/${taskId}`);
      return response.data;
    } catch (error: any) {
      console.error('Error getting task status:', error);
      throw this.handleAPIError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
    }
  }

  /**
   * Polling –∑–∞–¥–∞—á–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  private async pollTaskStatus(
    taskId: string,
    onProgress?: (status: TaskStatus) => void
  ): Promise<any> {
    const startTime = Date.now();

    while (Date.now() - startTime < this.MAX_POLLING_TIME) {
      try {
        const status = await this.getTaskStatus(taskId);

        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        if (onProgress) {
          onProgress(status);
        }

        console.log('üìã Task status:', status.state, status.message);

        if (status.state === 'SUCCESS') {
          return status.result;
        } else if (status.state === 'FAILURE') {
          throw new Error(status.error || '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π');
        }

        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, this.POLLING_INTERVAL));

      } catch (error) {
        console.error('Error polling task status:', error);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É —Å—Ä–∞–∑—É, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        await new Promise(resolve => setTimeout(resolve, this.POLLING_INTERVAL));
      }
    }

    throw new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
   */
  private handleAPIError(error: any, defaultMessage: string): Error {
    if (error.response?.data?.detail) {
      if (Array.isArray(error.response.data.detail)) {
        // –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const validationErrors = error.response.data.detail
          .map((err: any) => `${err.loc?.join('.')} - ${err.msg}`)
          .join('; ');
        return new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`);
      } else if (typeof error.response.data.detail === 'string') {
        // –°—Ç—Ä–æ–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞
        return new Error(error.response.data.detail);
      }
    }
    return new Error(defaultMessage);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–≤—ã–±–∏—Ä–∞–µ—Ç async/sync –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
   */
  async analyzeCalendar(
    requestData: CalendarAnalysisRequest,
    forceRefresh: boolean = false,
    useAsync: boolean = true,
    onProgress?: (status: TaskStatus) => void
  ): Promise<CalendarAnalysis> {
    if (useAsync) {
      return this.analyzeCalendarAsync(requestData, forceRefresh, onProgress);
    } else {
      return this.analyzeCalendarSync(requestData, forceRefresh);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ò–ò
   */
  clearAICache(): void {
    cacheService.clearAICache();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ –ò–ò
   */
  getCacheInfo() {
    return cacheService.getCacheInfo();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getGoals(includeCompleted: boolean = false): Promise<SmartGoal[]> {
    try {
      const response = await api.get(`/ai/goals?include_completed=${includeCompleted}`);
      return response.data;
    } catch (error) {
      console.error('Error getting user goals:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
   */
  async updateCalendarEvent(eventId: string, updateData: any): Promise<any> {
    try {
      // Backend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PATCH /calendar/event/{event_id}
      const response = await api.patch(`/calendar/event/${eventId}`, updateData);
      return response.data;
    } catch (error) {
      console.error('Error updating calendar event:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
   */
  async applyScheduleChange(change: ScheduleChange): Promise<boolean> {
    try {
      const response = await api.post('/ai/apply-schedule-change', change);
      return response.data.success;
    } catch (error) {
      console.error('Error applying schedule change:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  }

  /**
   * –û–±—â–µ–Ω–∏–µ —Å –ò–ò –≤ —á–∞—Ç-—Ñ–æ—Ä–º–∞—Ç–µ
   */
  async chatWithAI(
    messages: Array<{role: string; content: string}>,
    systemPrompt?: string
  ): Promise<string> {
    try {
      const response = await api.post('/ai/chat', {
        messages: messages,
        system_prompt: systemPrompt,
        model: 'gpt-4',
        temperature: 0.7,
        max_tokens: 1000
      });

      return response.data.content;
    } catch (error) {
      console.error('Error in AI chat:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò');
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ SMART —Ü–µ–ª–∏
   */
  async createSMARTGoal(goal: SmartGoal): Promise<SmartGoal> {
    try {
      const response = await api.post('/ai/goals', goal);
      return response.data;
    } catch (error) {
      console.error('Error creating SMART goal:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏');
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
   */
  async analyzeGoal(goal: SmartGoal): Promise<GoalAnalysis> {
    try {
      const response = await api.post('/ai/analyze-goal', goal);
      return response.data;
    } catch (error) {
      console.error('Error analyzing goal:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–ª–∏');
    }
  }
}

export const aiService = new AIService();
