import api from './api';
import cacheService from './cacheService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º
export interface RecurrenceSuggestion {
  rrule?: string;           // –Ω–∞–ø—Ä–∏–º–µ—Ä: FREQ=WEEKLY;BYDAY=MO,WE
  days_of_week?: string[];  // MO,TU,WE,TH,FR,SA,SU
  frequency?: string;       // daily|weekly|monthly|yearly
  interval?: number;        // —à–∞–≥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
  until?: string;           // ISO 8601
}

export interface ScheduleChange {
  id: string;
  action: string;
  title: string;
  reason: string;
  new_start?: string;
  new_end?: string;
  priority?: string;
  recurrence?: RecurrenceSuggestion; // –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
}

export interface CalendarAnalysis {
  summary: string;
  schedule_changes: ScheduleChange[];
  recommendations: string[];
  productivity_score?: number;
  goal_alignment?: string;
}

export interface SmartGoal {
  id?: string;
  title: string;
  description: string;
  specific: string;
  measurable: string;
  achievable: string;
  relevant: string;
  time_bound: string;
  deadline?: string;
  priority?: string;
  status?: string;
}

export interface CalendarAnalysisRequest {
  calendar_events: any[];
  user_goals?: SmartGoal[];
  analysis_period_days?: number;
  goals?: string[];
  context?: string;
}

class AIService {
  private readonly AI_CACHE_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –ò–ò —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async analyzeCalendar(requestData: CalendarAnalysisRequest, forceRefresh: boolean = false): Promise<CalendarAnalysis> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!forceRefresh) {
        const cachedResult = cacheService.getByData<CalendarAnalysis>(requestData);
        if (cachedResult) {
          console.log('üìã Using cached AI analysis');
          return cachedResult;
        }
      }

      console.log('ü§ñ Requesting fresh AI analysis...');
      console.log('Sending analysis request:', requestData);

      const response = await api.post('/ai/analyze-calendar', requestData);

      console.log('Analysis response:', response.data);

      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 24 —á–∞—Å–∞
      cacheService.setByData(requestData, response.data, this.AI_CACHE_TTL);

      return response.data;
    } catch (error: any) {
      console.error('Error analyzing calendar:', error);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic
      if (error.response?.data?.detail) {
        if (Array.isArray(error.response.data.detail)) {
          // –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          const validationErrors = error.response.data.detail
            .map((err: any) => `${err.loc?.join('.')} - ${err.msg}`)
            .join('; ');
          throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`);
        } else if (typeof error.response.data.detail === 'string') {
          // –°—Ç—Ä–æ–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞
          throw new Error(error.response.data.detail);
        }
      }

      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ò–ò
   */
  clearAICache(): void {
    cacheService.clearAICache();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ –ò–ò
   */
  getCacheInfo() {
    return cacheService.getCacheInfo();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getGoals(includeCompleted: boolean = false): Promise<SmartGoal[]> {
    try {
      const response = await api.get(`/ai/goals?include_completed=${includeCompleted}`);
      return response.data;
    } catch (error) {
      console.error('Error getting user goals:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
   */
  async updateCalendarEvent(eventId: string, updateData: any): Promise<any> {
    try {
      // Backend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PATCH /calendar/event/{event_id}
      const response = await api.patch(`/calendar/event/${eventId}`, updateData);
      return response.data;
    } catch (error) {
      console.error('Error updating calendar event:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
   */
  async applyScheduleChange(change: ScheduleChange): Promise<boolean> {
    try {
      const response = await api.post('/ai/apply-schedule-change', change);
      return response.data.success;
    } catch (error) {
      console.error('Error applying schedule change:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
   */
  async getPlanningRecommendations(
    freeSlots: any[],
    goal: any,
    context?: string
  ): Promise<any> {
    try {
      const response = await api.post('/ai/plan-goal', {
        free_time_slots: freeSlots,
        goal: goal,
        context: context
      });

      return response.data;
    } catch (error) {
      console.error('Error getting planning recommendations:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é');
    }
  }

  /**
   * –û–±—â–µ–Ω–∏–µ —Å –ò–ò –≤ —á–∞—Ç-—Ñ–æ—Ä–º–∞—Ç–µ
   */
  async chatWithAI(
    messages: Array<{role: string; content: string}>,
    systemPrompt?: string
  ): Promise<string> {
    try {
      const response = await api.post('/ai/chat', {
        messages: messages,
        system_prompt: systemPrompt,
        model: 'gpt-4',
        temperature: 0.7,
        max_tokens: 1000
      });

      return response.data.content;
    } catch (error) {
      console.error('Error in AI chat:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò');
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ SMART —Ü–µ–ª–∏
   */
  async createSMARTGoal(goal: SmartGoal): Promise<SmartGoal> {
    try {
      const response = await api.post('/ai/goals', goal);
      return response.data;
    } catch (error) {
      console.error('Error creating SMART goal:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏');
    }
  }
}

export const aiService = new AIService();
