import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      const refreshToken = localStorage.getItem('refresh_token');
      if (refreshToken) {
        try {
          console.log('API Interceptor: Token expired, attempting refresh...');
          const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {
            refresh_token: refreshToken,
          });
          
          const { access_token, refresh_token: newRefreshToken } = response.data;
          localStorage.setItem('access_token', access_token);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π
          if (newRefreshToken) {
            localStorage.setItem('refresh_token', newRefreshToken);
          }

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          originalRequest.headers.Authorization = `Bearer ${access_token}`;
          console.log('API Interceptor: Token refreshed successfully, retrying original request...');
          return api(originalRequest);
        } catch (refreshError) {
          console.error('API Interceptor: Token refresh failed:', refreshError);
          console.log('üî¥ API Interceptor: Clearing auth data due to refresh failure');
          console.trace('Stack trace for API interceptor clearing tokens');

          // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          localStorage.removeItem('access_token');
          localStorage.removeItem('refresh_token');
          localStorage.removeItem('user_info');

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          window.dispatchEvent(new Event('authStateChanged'));

          // –ù–µ –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø—É—Å—Ç—å App.tsx —Ä–µ—à–∞–µ—Ç
          return Promise.reject(refreshError);
        }
      } else {
        // –ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log('üî¥ API Interceptor: No refresh token found, clearing auth data');
        console.trace('Stack trace for API interceptor clearing tokens (no refresh token)');

        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('user_info');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.dispatchEvent(new Event('authStateChanged'));
      }
    }
    return Promise.reject(error);
  }
);

export default api;
