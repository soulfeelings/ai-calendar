// –°–µ—Ä–≤–∏—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò —Å —Ä–∞–∑–Ω—ã–º–∏ TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
import { CalendarAnalysis } from './aiService';

export interface RecommendationsCacheItem {
  data: CalendarAnalysis;
  timestamp: number;
  expiresAt: number;
  analysisType: 'week' | 'tomorrow' | 'general';
  requestHash: string;
}

class RecommendationsCacheService {
  private readonly CACHE_PREFIX = 'ai_recommendations_';

  // TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  private readonly TTL_CONFIG = {
    tomorrow: 24 * 60 * 60 * 1000,      // 24 —á–∞—Å–∞ –¥–ª—è "–∑–∞–≤—Ç—Ä–∞"
    general: 24 * 60 * 60 * 1000,       // 24 —á–∞—Å–∞ –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    week: 7 * 24 * 60 * 60 * 1000,      // 7 –¥–Ω–µ–π –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  };

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  private generateCacheKey(requestData: any, analysisType: string): string {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤–∫–ª—é—á–∞—é—â–∏–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
    const keyData = {
      type: analysisType,
      events_count: requestData.calendar_events?.length || 0,
      goals_count: requestData.user_goals?.length || 0,
      analysis_period_days: requestData.analysis_period_days,
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞
      date_key: this.getDateKey(analysisType),
      // –•–µ—à —Ü–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      goals_hash: this.hashGoals(requestData.user_goals || [])
    };

    const jsonString = JSON.stringify(keyData);
    return this.CACHE_PREFIX + this.simpleHash(jsonString);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
   */
  private getDateKey(analysisType: string): string {
    const now = new Date();

    switch (analysisType) {
      case 'tomorrow':
        // –î–ª—è –∑–∞–≤—Ç—Ä–∞ - –∫–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        return now.toISOString().split('T')[0];
      case 'week':
        // –î–ª—è –Ω–µ–¥–µ–ª–∏ - –∫–ª—é—á –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
        const startOfWeek = new Date(now);
        startOfWeek.setDate(now.getDate() - now.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        return startOfWeek.toISOString().split('T')[0];
      default:
        return now.toISOString().split('T')[0];
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö–µ—à —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  private hashGoals(goals: any[]): string {
    const goalsSummary = goals.map(goal => ({
      id: goal.id,
      title: goal.title,
      deadline: goal.deadline,
      priority: goal.priority
    }));
    return this.simpleHash(JSON.stringify(goalsSummary));
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  private simpleHash(str: string): string {
    let hash = 0;
    if (str.length === 0) return hash.toString();
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(16);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç TTL –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  private getTTL(analysisType: string): number {
    return this.TTL_CONFIG[analysisType as keyof typeof this.TTL_CONFIG] || this.TTL_CONFIG.general;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–µ—à
   */
  setRecommendations(requestData: any, analysisType: string, result: CalendarAnalysis): void {
    try {
      const cacheKey = this.generateCacheKey(requestData, analysisType);
      const ttl = this.getTTL(analysisType);
      const timestamp = Date.now();
      const expiresAt = timestamp + ttl;

      const cacheItem: RecommendationsCacheItem = {
        data: result,
        timestamp,
        expiresAt,
        analysisType: analysisType as 'week' | 'tomorrow' | 'general',
        requestHash: this.simpleHash(JSON.stringify(requestData))
      };

      localStorage.setItem(cacheKey, JSON.stringify(cacheItem));

      console.log(`üíæ Cached AI recommendations for ${analysisType} (TTL: ${ttl}ms)`, {
        key: cacheKey,
        expiresAt: new Date(expiresAt).toISOString()
      });
    } catch (error) {
      console.warn('Failed to cache AI recommendations:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  getRecommendations(requestData: any, analysisType: string): CalendarAnalysis | null {
    try {
      const cacheKey = this.generateCacheKey(requestData, analysisType);
      const cachedData = localStorage.getItem(cacheKey);

      if (!cachedData) {
        console.log(`üì≠ No cached recommendations found for ${analysisType}`);
        return null;
      }

      const cacheItem: RecommendationsCacheItem = JSON.parse(cachedData);
      const now = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–µ—à
      if (now > cacheItem.expiresAt) {
        console.log(`‚è∞ Cache expired for ${analysisType}, removing...`);
        localStorage.removeItem(cacheKey);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
      const currentRequestHash = this.simpleHash(JSON.stringify(requestData));
      if (cacheItem.requestHash !== currentRequestHash) {
        console.log(`üîÑ Request data changed for ${analysisType}, cache invalidated`);
        localStorage.removeItem(cacheKey);
        return null;
      }

      const timeLeft = cacheItem.expiresAt - now;
      console.log(`üì¶ Using cached recommendations for ${analysisType}`, {
        cached_at: new Date(cacheItem.timestamp).toISOString(),
        expires_in: `${Math.round(timeLeft / (1000 * 60))} minutes`
      });

      return cacheItem.data;
    } catch (error) {
      console.warn('Failed to retrieve cached recommendations:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  hasValidCache(requestData: any, analysisType: string): boolean {
    return this.getRecommendations(requestData, analysisType) !== null;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  clearRecommendations(analysisType?: string): void {
    try {
      const keys = Object.keys(localStorage);
      const recommendationKeys = keys.filter(key => key.startsWith(this.CACHE_PREFIX));

      if (analysisType) {
        // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        recommendationKeys.forEach(key => {
          const cachedData = localStorage.getItem(key);
          if (cachedData) {
            try {
              const cacheItem: RecommendationsCacheItem = JSON.parse(cachedData);
              if (cacheItem.analysisType === analysisType) {
                localStorage.removeItem(key);
                console.log(`üóëÔ∏è Cleared ${analysisType} cache`);
              }
            } catch (e) {
              // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
              localStorage.removeItem(key);
            }
          }
        });
      } else {
        // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendationKeys.forEach(key => localStorage.removeItem(key));
        console.log('üßπ Cleared all AI recommendations cache');
      }
    } catch (error) {
      console.warn('Failed to clear cache:', error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  clearAllRecommendations(): void {
    this.clearRecommendations();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–µ—à
   */
  cleanupExpiredCache(): void {
    try {
      const keys = Object.keys(localStorage);
      const recommendationKeys = keys.filter(key => key.startsWith(this.CACHE_PREFIX));
      const now = Date.now();
      let cleanedCount = 0;

      recommendationKeys.forEach(key => {
        const cachedData = localStorage.getItem(key);
        if (cachedData) {
          try {
            const cacheItem: RecommendationsCacheItem = JSON.parse(cachedData);
            if (now > cacheItem.expiresAt) {
              localStorage.removeItem(key);
              cleanedCount++;
            }
          } catch (e) {
            // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            localStorage.removeItem(key);
            cleanedCount++;
          }
        }
      });

      if (cleanedCount > 0) {
        console.log(`üßπ Cleaned up ${cleanedCount} expired cache entries`);
      }
    } catch (error) {
      console.warn('Failed to cleanup expired cache:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–µ—à–∞
   */
  getCacheInfo(): {
    total: number;
    expired: number;
    byType: Record<string, number>;
    totalSize: number;
  } {
    try {
      const keys = Object.keys(localStorage);
      const recommendationKeys = keys.filter(key => key.startsWith(this.CACHE_PREFIX));
      const now = Date.now();

      let totalSize = 0;
      let expiredCount = 0;
      const byType: Record<string, number> = {
        tomorrow: 0,
        week: 0,
        general: 0
      };

      recommendationKeys.forEach(key => {
        const cachedData = localStorage.getItem(key);
        if (cachedData) {
          totalSize += cachedData.length;
          try {
            const cacheItem: RecommendationsCacheItem = JSON.parse(cachedData);
            if (now > cacheItem.expiresAt) {
              expiredCount++;
            }
            byType[cacheItem.analysisType] = (byType[cacheItem.analysisType] || 0) + 1;
          } catch (e) {
            expiredCount++;
          }
        }
      });

      return {
        total: recommendationKeys.length,
        expired: expiredCount,
        byType,
        totalSize
      };
    } catch (error) {
      console.warn('Failed to get cache info:', error);
      return {
        total: 0,
        expired: 0,
        byType: { tomorrow: 0, week: 0, general: 0 },
        totalSize: 0
      };
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
   */
  init(): void {
    this.cleanupExpiredCache();
    console.log('üì¶ RecommendationsCacheService initialized');
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const recommendationsCacheService = new RecommendationsCacheService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ
recommendationsCacheService.init();

export default recommendationsCacheService;
