import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { aiService, SmartGoal, GoalAnalysis } from '../services/aiService';
import api from '../services/api';
import './Goals.css';

const priorityOptions = [
  { value: 'high', label: '–í—ã—Å–æ–∫–∏–π' },
  { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π' },
  { value: 'low', label: '–ù–∏–∑–∫–∏–π' },
];

const Goals: React.FC = () => {
  const navigate = useNavigate();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–ø–æ–≤: 'input' | 'analysis' | 'saved'
  const [currentStep, setCurrentStep] = useState<'input' | 'analysis' | 'saved'>('input');

  const [form, setForm] = useState<SmartGoal>({
    title: '',
    description: '',
    specific: '',
    measurable: '',
    achievable: '',
    relevant: '',
    time_bound: '',
    deadline: '',
    priority: 'medium',
  });

  const [deadlineDate, setDeadlineDate] = useState<string>('');
  const [deadlineTime, setDeadlineTime] = useState<string>('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
  const [goalAnalysis, setGoalAnalysis] = useState<GoalAnalysis | null>(null);
  const [analyzing, setAnalyzing] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–ª–µ–π
  const [goals, setGoals] = useState<SmartGoal[]>([]);
  const [loadingGoals, setLoadingGoals] = useState(false);
  const [creatingEvents, setCreatingEvents] = useState<{[goalId: string]: boolean}>({});
  const [createdEvents, setCreatedEvents] = useState<{[goalId: string]: string}>({});

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const canAnalyze = form.title.trim().length > 0 && form.description.trim().length > 0;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedEvents = localStorage.getItem('goalCalendarEvents');
    if (savedEvents) {
      try {
        setCreatedEvents(JSON.parse(savedEvents));
      } catch (e) {
        console.error('Error parsing saved events:', e);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ localStorage
  const saveCreatedEvent = (goalId: string, eventId: string) => {
    const updatedEvents = { ...createdEvents, [goalId]: eventId };
    setCreatedEvents(updatedEvents);
    localStorage.setItem('goalCalendarEvents', JSON.stringify(updatedEvents));
  };

  // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
  const removeCreatedEvent = (goalId: string) => {
    const updatedEvents = { ...createdEvents };
    delete updatedEvents[goalId];
    setCreatedEvents(updatedEvents);
    localStorage.setItem('goalCalendarEvents', JSON.stringify(updatedEvents));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const deleteEventForGoal = async (goal: SmartGoal) => {
    if (!goal.id || !createdEvents[goal.id]) return;

    const eventId = createdEvents[goal.id];
    setCreatingEvents(prev => ({ ...prev, [goal.id!]: true }));
    setError(null);

    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      await api.delete(`/calendar/events/${eventId}`);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      removeCreatedEvent(goal.id);
      setSuccess(`–°–æ–±—ã—Ç–∏–µ "${goal.title}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è`);

    } catch (e: any) {
      console.error('Error deleting calendar event:', e);
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    } finally {
      setCreatingEvents(prev => ({ ...prev, [goal.id!]: false }));
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 3000);
    }
  };

  const loadGoals = async () => {
    try {
      setLoadingGoals(true);
      const list = await aiService.getGoals(false);
      setGoals(list || []);
    } catch (e) {
      // –ú–æ–ª—á–∞, —Å–ø–∏—Å–æ–∫ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    } finally {
      setLoadingGoals(false);
    }
  };

  const createEventForGoal = async (goal: SmartGoal) => {
    if (!goal.id) return;

    setCreatingEvents(prev => ({ ...prev, [goal.id!]: true }));
    setError(null);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
      let startTime, endTime;

      if (goal.deadline) {
        const deadline = new Date(goal.deadline);
        startTime = deadline.toISOString();
        endTime = new Date(deadline.getTime() + 60 * 60 * 1000).toISOString(); // +1 —á–∞—Å
      } else {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(9, 0, 0, 0); // 9 —É—Ç—Ä–∞ –∑–∞–≤—Ç—Ä–∞
        startTime = tomorrow.toISOString();
        endTime = new Date(tomorrow.getTime() + 60 * 60 * 1000).toISOString(); // +1 —á–∞—Å
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏
      const eventData = {
        summary: `–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é: ${goal.title}`,
        description: `üéØ SMART –¶–µ–ª—å: ${goal.description}

üìã –ö—Ä–∏ÔøΩÔøΩ–µ—Ä–∏–∏ SMART:
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å: ${goal.specific || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å: ${goal.measurable || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} 
‚Ä¢ –î–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å: ${goal.achievable || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ${goal.relevant || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: ${goal.time_bound || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityOptions.find(p => p.value === goal.priority)?.label || '–°—Ä–µ–¥–Ω–∏–π'}`,
        start: {
          dateTime: startTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        end: {
          dateTime: endTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        location: "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ SMART —Ü–µ–ª—å—é",
        reminders: {
          useDefault: true
        }
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –∫ backend —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
      const response = await api.post('/calendar/events', eventData);

      setSuccess(`–°–æ–±—ã—Ç–∏–µ "${goal.title}" —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ`);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ localStorage
      saveCreatedEvent(goal.id, response.data.id);

    } catch (e: any) {
      console.error('Error creating calendar event:', e);
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
    } finally {
      setCreatingEvents(prev => ({ ...prev, [goal.id!]: false }));
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
    }
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const handleFieldChange = (key: keyof SmartGoal, value: string) => {
    setForm((prev) => ({ ...prev, [key]: value }));
  };

  const handleAnalyzeGoal = async () => {
    if (!canAnalyze) return;

    setError(null);
    setAnalyzing(true);

    try {
      const analysis = await aiService.analyzeGoal(form);
      setGoalAnalysis(analysis);
      setCurrentStep('analysis');
    } catch (e: any) {
      setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞ÔøΩÔøΩ–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å');
    } finally {
      setAnalyzing(false);
    }
  };

  const applyImprovedGoal = () => {
    if (goalAnalysis?.improved_goal) {
      setForm(prev => ({
        ...prev,
        title: goalAnalysis.improved_goal!.title,
        description: goalAnalysis.improved_goal!.description,
        specific: goalAnalysis.improved_goal!.specific,
        measurable: goalAnalysis.improved_goal!.measurable,
        achievable: goalAnalysis.improved_goal!.achievable,
        relevant: goalAnalysis.improved_goal!.relevant,
        time_bound: goalAnalysis.improved_goal!.time_bound,
      }));
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setCurrentStep('input');
      setGoalAnalysis(null);
    }
  };

  const editGoal = () => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    setCurrentStep('input');
    setGoalAnalysis(null);
  };

  const handleSaveGoal = async () => {
    setError(null);
    setSuccess(null);

    // –°–æ–±–∏—Ä–∞–µ–º deadline –≤ ISO, –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞
    let deadlineISO: string | undefined = undefined;
    if (deadlineDate) {
      deadlineISO = new Date(`${deadlineDate}T${deadlineTime || '23:59'}:00`).toISOString();
    }

    const payload: SmartGoal = {
      ...form,
      deadline: deadlineISO, // –±—É–¥–µ—Ç undefined –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    };

    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    Object.keys(payload).forEach(key => {
      const value = (payload as any)[key];
      if (value === '' || value === null) {
        delete (payload as any)[key];
      }
    });

    try {
      setSaving(true);
      await aiService.createSMARTGoal(payload);
      setSuccess('–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      setCurrentStep('saved');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await loadGoals();
    } catch (e: any) {
      setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å');
    } finally {
      setSaving(false);
    }
  };

  const resetForm = () => {
    setForm({
      title: '',
      description: '',
      specific: '',
      measurable: '',
      achievable: '',
      relevant: '',
      time_bound: '',
      deadline: '',
      priority: 'medium',
    });
    setDeadlineDate('');
    setDeadlineTime('');
    setGoalAnalysis(null);
    setCurrentStep('input');
    setError(null);
    setSuccess(null);
  };

  const renderInputStep = () => (
    <div className="card">
      <h3>–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏</h3>
      <p className="muted">
        –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å. –ò–ò –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SMART –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—Ç —É–ª—É—á—à–µ–Ω–∏—è.
      </p>

      <div className="form-group">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ *</label>
        <input
          type="text"
          className="input"
          value={form.title}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"
          onChange={(e) => handleFieldChange('title', e.target.value)}
        />
      </div>

      <div className="form-group">
        <label>–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ *</label>
        <textarea
          className="input"
          value={form.description}
          placeholder="–ó–∞—á–µ–º —ç—Ç–∞ —Ü–µ–ª—å –≤–∞–∂–Ω–∞ –∏ –∫–∞–∫–æ–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
          onChange={(e) => handleFieldChange('description', e.target.value)}
          rows={3}
        />
      </div>

      <div className="form-group">
        <label>–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å (Specific)</label>
        <textarea
          className="input"
          value={form.specific}
          placeholder="–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?"
          onChange={(e) => handleFieldChange('specific', e.target.value)}
          rows={2}
        />
      </div>

      <div className="form-group">
        <label>–ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å (Measurable)</label>
        <textarea
          className="input"
          value={form.measurable}
          placeholder="–ö–∞–∫ –≤—ã –ø–æ–π–º—ë—Ç–µ, —á—Ç–æ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞?"
          onChange={(e) => handleFieldChange('measurable', e.target.value)}
          rows={2}
        />
      </div>

      <div className="form-group">
        <label>–î–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å (Achievable)</label>
        <textarea
          className="input"
          value={form.achievable}
          placeholder="–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏? –ö–∞–∫–∏–µ —Ä–µ—ÅÔøΩÔøΩ—Ä—Å—ã ÔøΩÔøΩ—É–∂–Ω—ã?"
          onChange={(e) => handleFieldChange('achievable', e.target.value)}
          rows={2}
        />
      </div>

      <div className="form-group">
        <label>–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (Relevant)</label>
        <textarea
          className="input"
          value={form.relevant}
          placeholder="–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å?"
          onChange={(e) => handleFieldChange('relevant', e.target.value)}
          rows={2}
        />
      </div>

      <div className="form-group">
        <label>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ (Time-bound)</label>
        <textarea
          className="input"
          value={form.time_bound}
          placeholder="–ö–∞–∫–æ–π —É —Ü–µ–ª–∏ —Å—Ä–æ–∫? –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ö–∏?"
          onChange={(e) => handleFieldChange('time_bound', e.target.value)}
          rows={2}
        />
      </div>

      <div className="grid-2">
        <div className="form-group">
          <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
          <select
            className="input"
            value={form.priority || 'medium'}
            onChange={(e) => handleFieldChange('priority', e.target.value)}
          >
            {priorityOptions.map((p) => (
              <option key={p.value} value={p.value}>{p.label}</option>
            ))}
          </select>
        </div>
        <div className="form-group">
          <label>–î–µ–¥–ª–∞–π–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <div className="deadline-row">
            <input
              type="date"
              className="input"
              value={deadlineDate}
              onChange={(e) => setDeadlineDate(e.target.value)}
            />
            <input
              type="time"
              className="input"
              value={deadlineTime}
              onChange={(e) => setDeadlineTime(e.target.value)}
            />
          </div>
        </div>
      </div>

      {error && <div className="alert error">{error}</div>}

      <div className="wizard-actions">
        <button
          className="btn primary"
          onClick={handleAnalyzeGoal}
          disabled={!canAnalyze || analyzing}
        >
          {analyzing ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò'}
        </button>
      </div>
    </div>
  );

  const renderAnalysisStep = () => {
    if (!goalAnalysis) return null;

    return (
      <div className="card">
        <h3>–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ –æ—Ç –ò–ò</h3>

        <div className="goal-score">
          <div className="score-circle">
            <span className="score-value">{goalAnalysis.score}</span>
            <span className="score-label">/ 100</span>
          </div>
          <div className="score-status">
            {goalAnalysis.is_smart ? (
              <span className="status-good">‚úÖ –¶–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SMART</span>
            ) : (
              <span className="status-warning">‚ö†Ô∏è –¶–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏</span>
            )}
          </div>
        </div>

        <div className="analysis-details">
          <h4>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</h4>
          {Object.entries(goalAnalysis.analysis).map(([key, analysis]) => (
            <div key={key} className="analysis-item">
              <div className="analysis-header">
                <span className="analysis-title">{getSmartLabel(key)}</span>
                <span className={`analysis-score ${analysis.score >= 80 ? 'good' : analysis.score >= 50 ? 'medium' : 'poor'}`}>
                  {analysis.score}/100
                </span>
              </div>
              <p className="analysis-feedback">{analysis.feedback}</p>
            </div>
          ))}
        </div>

        {goalAnalysis.suggestions.length > 0 && (
          <div className="suggestions">
            <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</h4>
            <ul>
              {goalAnalysis.suggestions.map((suggestion, index) => (
                <li key={index}>{suggestion}</li>
              ))}
            </ul>
          </div>
        )}

        {goalAnalysis.improved_goal && (
          <div className="improved-goal">
            <h4>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:</h4>
            <div className="improved-preview">
              <p><strong>–ù–∞ÔøΩÔøΩ–≤–∞–Ω–∏–µ:</strong> {goalAnalysis.improved_goal.title}</p>
              <p><strong>–û–ø–∏—Å–∞ÔøΩÔøΩ–∏–µ:</strong> {goalAnalysis.improved_goal.description}</p>
            </div>
            <button className="btn secondary" onClick={applyImprovedGoal}>
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
            </button>
          </div>
        )}

        {error && <div className="alert error">{error}</div>}

        <div className="wizard-actions">
          <button className="btn secondary" onClick={() => setCurrentStep('input')}>
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
          </button>
          <button
            className="btn primary"
            onClick={handleSaveGoal}
            disabled={saving}
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å'}
          </button>
        </div>
      </div>
    );
  };

  const renderSavedStep = () => (
    <div className="card">
      <div className="success-message">
        <div className="success-icon">‚úÖ</div>
        <h3>–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</h3>
        <p>–í–∞—à–∞ SMART-—Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.</p>

        <div className="wizard-actions">
          <button className="btn secondary" onClick={resetForm}>
            –°–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É —Ü–µ–ª—å
          </button>
          <button className="btn primary" onClick={() => navigate('/profile')}>
            –ö –ø—Ä–æ—Ñ–∏–ª—é
          </button>
        </div>
      </div>
    </div>
  );

  const getSmartLabel = (key: string): string => {
    const labels: { [key: string]: string } = {
      specific: 'S ‚Äî –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å',
      measurable: 'M ‚Äî –ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å',
      achievable: 'A ‚Äî –î–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å',
      relevant: 'R ‚Äî –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å',
      time_bound: 'T ‚Äî –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏'
    };
    return labels[key] || key;
  };

  return (
    <div className="goals-page">
      <div className="goals-header">
        <h2>–ú–æ–∏ —Ü–µ–ª–∏ (SMART)</h2>
        <div className="goals-header-actions">
          <button className="link-btn" onClick={() => navigate('/profile')}>–ö –ø—Ä–æ—Ñ–∏–ª—é</button>
        </div>
      </div>

      <div className="goals-layout">
        <div className="wizard">
          <div className="steps">
            <div className={`step ${currentStep === 'input' ? 'active' : (currentStep === 'analysis' || currentStep === 'saved') ? 'done' : ''}`}>
              <span className="step-index">1</span>
              <span className="step-title">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏</span>
            </div>
            <div className={`step ${currentStep === 'analysis' ? 'active' : currentStep === 'saved' ? 'done' : ''}`}>
              <span className="step-index">2</span>
              <span className="step-title">–ê–Ω–∞–ª–∏–∑ –ò–ò</span>
            </div>
          </div>

          {currentStep === 'input' && renderInputStep()}
          {currentStep === 'analysis' && renderAnalysisStep()}
          {currentStep === 'saved' && renderSavedStep()}

          {success && <div className="alert success">{success}</div>}
        </div>

        <div className="goals-list">
          <div className="goals-list-header">
            <h3>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏</h3>
            <button
              className="refresh-btn"
              onClick={loadGoals}
              disabled={loadingGoals}
              title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π"
            >
              {loadingGoals ? 'üîÑ' : '‚Üª'}
            </button>
          </div>
          {loadingGoals ? (
            <p>–ó–∞–≥—Ä—ÉÔøΩÔøΩ–∞–µ–º —Ü–µ–ª–∏...</p>
          ) : goals.length === 0 ? (
            <p className="muted">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</p>
          ) : (
            <div className="goals-grid">
              {goals.map((goal) => (
                <div key={goal.id} className="goal-card">
                  <h4>{goal.title}</h4>
                  <p className="muted">{goal.description}</p>
                  <div className="goal-meta">
                    <span className={`priority priority-${goal.priority}`}>
                      {priorityOptions.find(p => p.value === goal.priority)?.label}
                    </span>
                    {goal.deadline && (
                      <span className="deadline">
                        –¥–æ {new Date(goal.deadline).toLocaleDateString()}
                      </span>
                    )}
                  </div>
                  <div className="goal-actions">
                    {createdEvents[goal.id || ''] ? (
                      // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                      <>
                        <div className="event-status">
                          <span className="status-badge created">
                            ‚úÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                          </span>
                        </div>
                        <button
                          className="delete-btn"
                          onClick={() => deleteEventForGoal(goal)}
                          disabled={creatingEvents[goal.id || ''] || false}
                          title="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
                        >
                          {creatingEvents[goal.id || ''] ? '‚è≥' : 'üóëÔ∏è'}
                          {creatingEvents[goal.id || ''] ? '–£–¥–∞–ª—è–µ–º...' : '–£–¥–∞–ª–∏—Ç—å'}
                        </button>
                      </>
                    ) : (
                      // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
                      <button
                        className="calendar-btn"
                        onClick={() => createEventForGoal(goal)}
                        disabled={creatingEvents[goal.id || ''] || false}
                        title="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"
                      >
                        {creatingEvents[goal.id || ''] ? '‚è≥' : 'üìÖ'}
                        {creatingEvents[goal.id || ''] ? '–°–æ–∑–¥–∞—ë–º...' : '–í –∫–∞–ª–µ–Ω–¥–∞—Ä—å'}
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Goals;

