import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { aiService, SmartGoal, GoalAnalysis } from '../services/aiService';
import api from '../services/api';
import './Goals.css';

const priorityOptions = [
  { value: 'high', label: '–í—ã—Å–æ–∫–∏–π' },
  { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π' },
  { value: 'low', label: '–ù–∏–∑–∫–∏–π' },
];

const Goals: React.FC = () => {
  const navigate = useNavigate();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–ø–æ–≤: 'input' | 'analysis' | 'saved'
  const [currentStep, setCurrentStep] = useState<'input' | 'analysis' | 'saved'>('input');

  const [form, setForm] = useState<SmartGoal>({
    title: '',
    description: '',
    deadline: '',
    priority: 'medium',
  });

  const [deadlineDate, setDeadlineDate] = useState<string>('');
  const [deadlineTime, setDeadlineTime] = useState<string>('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
  const [goalAnalysis, setGoalAnalysis] = useState<GoalAnalysis | null>(null);
  const [analyzing, setAnalyzing] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–ª–µ–π
  const [goals, setGoals] = useState<SmartGoal[]>([]);
  const [loadingGoals, setLoadingGoals] = useState(false);
  const [creatingEvents, setCreatingEvents] = useState<{[goalId: string]: boolean}>({});
  const [createdEvents, setCreatedEvents] = useState<{[goalId: string]: string}>({});

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
  const [editingGoal, setEditingGoal] = useState<SmartGoal | null>(null);
  const [deletingGoal, setDeletingGoal] = useState<string | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const canAnalyze = form.title.trim().length > 0 && form.description.trim().length > 0;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedEvents = localStorage.getItem('goalCalendarEvents');
    if (savedEvents) {
      try {
        setCreatedEvents(JSON.parse(savedEvents));
      } catch (e) {
        console.error('Error parsing saved events:', e);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ localStorage
  const saveCreatedEvent = (goalId: string, eventId: string) => {
    const updatedEvents = { ...createdEvents, [goalId]: eventId };
    setCreatedEvents(updatedEvents);
    localStorage.setItem('goalCalendarEvents', JSON.stringify(updatedEvents));
  };

  // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
  const removeCreatedEvent = (goalId: string) => {
    const updatedEvents = { ...createdEvents };
    delete updatedEvents[goalId];
    setCreatedEvents(updatedEvents);
    localStorage.setItem('goalCalendarEvents', JSON.stringify(updatedEvents));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const deleteEventForGoal = async (goal: SmartGoal) => {
    if (!goal.id || !createdEvents[goal.id]) return;

    const eventId = createdEvents[goal.id];
    setCreatingEvents(prev => ({ ...prev, [goal.id!]: true }));
    setError(null);

    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      await api.delete(`/calendar/events/${eventId}`);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      removeCreatedEvent(goal.id);
      setSuccess(`–°–æ–±—ã—Ç–∏–µ "${goal.title}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è`);

    } catch (e: any) {
      // –ú–æ–ª—á–∞, —Å–ø–∏—Å–æ–∫ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    } finally {
      setLoadingGoals(false);
    }
  };

  const createEventForGoal = async (goal: SmartGoal) => {
    if (!goal.id) return;

    setCreatingEvents(prev => ({ ...prev, [goal.id!]: true }));
    setError(null);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
      let startTime, endTime;

      if (goal.deadline) {
        const deadline = new Date(goal.deadline);
        startTime = deadline.toISOString();
        endTime = new Date(deadline.getTime() + 60 * 60 * 1000).toISOString(); // +1 —á–∞—Å
      } else {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(9, 0, 0, 0); // 9 —É—Ç—Ä–∞ –∑–∞–≤—Ç—Ä–∞
        startTime = tomorrow.toISOString();
        endTime = new Date(tomorrow.getTime() + 60 * 60 * 1000).toISOString(); // +1 —á–∞—Å
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏
      const eventData = {
        summary: `–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é: ${goal.title}`,
        description: `üéØ ÔøΩÔøΩ–µ–ª—å: ${goal.description}

${goal.smart_analysis ? `
üìä SMART –ê–Ω–∞–ª–∏–∑ (–ò–ò):
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: ${goal.smart_analysis.overall_score || 'N/A'}/100
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SMART: ${goal.smart_analysis.is_smart ? '–î–∞' : '–ù–µ—Ç'}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:
${goal.smart_analysis.suggestions?.map((s: string) => `‚Ä¢ ${s}`).join('\n') || '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'}
` : ''}

üîî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityOptions.find(p => p.value === goal.priority)?.label || '–°—Ä–µ–¥–Ω–∏–π'}`,
        start: {
          dateTime: startTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        end: {
          dateTime: endTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        location: "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ SMART —Ü–µ–ª—å—é",
        reminders: {
          useDefault: true
        }
      };

      // –ò—Å–ø–æ–ª—åÔøΩÔøΩ—É–µ–º –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –∫ backend —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
      const response = await api.post('/calendar/events', eventData);

      setSuccess(`–°–æ–±—ã—Ç–∏–µ "${goal.title}" —ÅÔøΩÔøΩ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ`);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ localStorage
      saveCreatedEvent(goal.id, response.data.id);

    } catch (e: any) {
      console.error('Error creating calendar event:', e);
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
    } finally {
      setCreatingEvents(prev => ({ ...prev, [goal.id!]: false }));
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
    }
  };

  const [showAllGoals, setShowAllGoals] = useState(false);

  useEffect(() => {
    loadGoals(showAllGoals);
  }, [showAllGoals]);

  const loadGoals = async (all: boolean = false) => {
    setLoadingGoals(true);
    setError(null);

    try {
      // all === true -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ (only_actual = false)
      const goalsData = await aiService.getGoals(true, !all);
      setGoals(goalsData);
    } catch (e: any) {
      setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–ª–∏');
    } finally {
      setLoadingGoals(false);
    }
  };

  const handleFieldChange = (key: keyof SmartGoal, value: string) => {
    setForm((prev) => ({ ...prev, [key]: value }));
  };

  const handleAnalyzeGoal = async () => {
    if (!canAnalyze) return;

    setError(null);
    setAnalyzing(true);

    try {
      // –°–æ–±–∏—Ä–∞–µ–º deadline –≤ ISO ÔøΩÔøΩ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞
      let deadlineISO = '';
      if (deadlineDate) {
        deadlineISO = new Date(`${deadlineDate}T${deadlineTime || '23:59'}:00`).toISOString();
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º deadline
      const goalForAnalysis = {
        ...form,
        deadline: deadlineISO
      };

      const analysis = await aiService.analyzeGoal(goalForAnalysis);
      setGoalAnalysis(analysis);
      setCurrentStep('analysis');
    } catch (e: any) {
      setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å');
    } finally {
      setAnalyzing(false);
    }
  };

  const applyImprovedGoal = () => {
    if (goalAnalysis?.improved_goal) {
      setForm(prev => ({
        ...prev,
        title: goalAnalysis.improved_goal!.title,
        description: goalAnalysis.improved_goal!.description,
      }));
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setCurrentStep('input');
      setGoalAnalysis(null);
    }
  };

  const editGoal = () => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    setCurrentStep('input');
    setGoalAnalysis(null);
  };

  const handleSaveGoal = async () => {
    console.log('handleSaveGoal called'); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setError(null);
    setSuccess(null);

    // –°–æ–±–∏—Ä–∞–µ–º deadline –≤ ISO, –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞
    let deadlineISO: string | undefined = undefined;
    if (deadlineDate) {
      deadlineISO = new Date(`${deadlineDate}T${deadlineTime || '23:59'}:00`).toISOString();
    }

    const payload: any = {
      title: form.title,
      description: form.description,
      priority: form.priority,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º deadline —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (deadlineISO) {
      payload.deadline = deadlineISO;
    }

    console.log('Payload to send:', payload); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

    try {
      setSaving(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      if (editingGoal && editingGoal.id) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–ª—å
        console.log('Updating existing goal with ID:', editingGoal.id);
        await aiService.updateGoal(editingGoal.id, payload);
        setSuccess('–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
        console.log('Creating new goal');
        await api.post('/ai/goals', payload);
        setSuccess('–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞');
      }

      setCurrentStep('saved');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await loadGoals();
      // –°–±—Ä–∞—Å—ã–≤–∞–µÔøΩÔøΩ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setEditingGoal(null);
    } catch (e: any) {
      console.error('Error saving goal:', e);
      const errorMessage = e?.response?.data?.detail;
      if (Array.isArray(errorMessage)) {
        const validationErrors = errorMessage.map((err: any) => `${err.loc?.join('.')} - ${err.msg}`).join('; ');
        setError(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—ÜÔøΩÔøΩ–∏: ${validationErrors}`);
      } else {
        setError(errorMessage || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å');
      }
    } finally {
      setSaving(false);
    }
  };

  const resetForm = () => {
    setForm({
      title: '',
      description: '',
      deadline: '',
      priority: 'medium',
    });
    setDeadlineDate('');
    setDeadlineTime('');
    setGoalAnalysis(null);
    setCurrentStep('input');
    setError(null);
    setSuccess(null);
    setEditingGoal(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  };

  const renderInputStep = () => (
    <div className="card">
      <h3>{editingGoal ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤ÔøΩÔøΩ–Ω–∏–µ —Ü–µ–ª–∏' : 'üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏'}</h3>
      <p className="muted">
        {editingGoal
          ? '–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏. –ò–ò –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SMART –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —É–ª—É—á—à–µ–Ω–∏—è.'
          : '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å. –ò–ò –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SMART –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —É–ª—É—á—à–µ–Ω–∏—è.'
        }
      </p>

      {editingGoal && (
        <div className="editing-notice">
          <span>üîÑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–ª—å</span>
          <button className="btn-link" onClick={resetForm}>
            –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          </button>
        </div>
      )}

      <div className="form-group">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ *</label>
        <input
          type="text"
          className="input"
          value={form.title}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"
          onChange={(e) => handleFieldChange('title', e.target.value)}
        />
      </div>

      <div className="form-group">
        <label>–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ *</label>
        <textarea
          className="input"
          value={form.description}
          placeholder="–ó–∞—á–µ–º —ç—Ç–∞ —Ü–µ–ª—å –≤–∞–∂–Ω–∞ –∏ –∫–∞–∫–æ–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
          onChange={(e) => handleFieldChange('description', e.target.value)}
          rows={4}
        />
      </div>

      <div className="grid-2">
        <div className="form-group">
          <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
          <select
            className="input"
            value={form.priority || 'medium'}
            onChange={(e) => handleFieldChange('priority', e.target.value)}
          >
            {priorityOptions.map((p) => (
              <option key={p.value} value={p.value}>{p.label}</option>
            ))}
          </select>
        </div>
        <div className="form-group">
          <label>–î–µ–¥–ª–∞–π–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
          <div className="deadline-row">
            <input
              type="date"
              className="input"
              value={deadlineDate}
              onChange={(e) => setDeadlineDate(e.target.value)}
            />
            <input
              type="time"
              className="input"
              value={deadlineTime}
              onChange={(e) => setDeadlineTime(e.target.value)}
            />
          </div>
        </div>
      </div>

      {error && <div className="alert error">{error}</div>}

      <div className="wizard-actions">
        <button
          className="btn primary"
          onClick={handleAnalyzeGoal}
          disabled={!canAnalyze || analyzing}
        >
          {analyzing ? (
            <>
              <div className="spinner" />
              –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
            </>
          ) : (
            <>
              ü§ñ –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
            </>
          )}
        </button>

        {canAnalyze && (
          <button
            className="btn secondary"
            onClick={handleSaveGoal}
            disabled={saving}
          >
            {saving ? (
              <>
                <div className="spinner" />
                –°–æ—Ö—Ä–∞–Ω—è–µ–º...
              </>
            ) : (
              '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞'
            )}
          </button>
        )}
      </div>
    </div>
  );

  const renderAnalysisStep = () => {
    if (!goalAnalysis) return null;

    const getScoreClass = (score: number) => {
      if (score >= 80) return 'score-high';
      if (score >= 50) return 'score-medium';
      return 'score-low';
    };

    return (
      <div className="card">
        <h3>ü§ñ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ –æ—Ç –ò–ò</h3>

        <div className="analysis-card">
          <div className="analysis-score">
            <div className={`score-circle ${getScoreClass(goalAnalysis.score)}`}>
              {goalAnalysis.score}
            </div>
            <div>
              <div className="score-status">
                {goalAnalysis.is_smart ? (
                  <span className="status-good">‚úÖ –¶–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SMART</span>
                ) : (
                  <span className="status-warning">‚ö†Ô∏è –¶–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏</span>
                )}
              </div>
              <div className="score-description">
                –û–±—â–∏–π –±–∞–ª–ª: <strong>{goalAnalysis.score}/100</strong>
              </div>
            </div>
          </div>

          <div className="analysis-details">
            <h4>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º SMART:</h4>
            {Object.entries(goalAnalysis.analysis).map(([key, analysis]) => (
              <div key={key} className="analysis-item">
                <div className="analysis-header">
                  <span className="analysis-title">{getSmartLabel(key)}</span>
                  <span className={`analysis-score ${getScoreClass(analysis.score)}`}>
                    {analysis.score}/100
                  </span>
                </div>
                <p className="analysis-feedback">{analysis.feedback}</p>
              </div>
            ))}
          </div>

          {goalAnalysis.suggestions.length > 0 && (
            <div className="analysis-suggestions">
              <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</h4>
              <ul>
                {goalAnalysis.suggestions.map((suggestion, index) => (
                  <li key={index}>{suggestion}</li>
                ))}
              </ul>
            </div>
          )}

          {goalAnalysis.improved_goal && (
            <div className="improved-goal">
              <h4>‚ú® –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:</h4>
              <div className="improved-preview">
                <div className="improved-field">
                  <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {goalAnalysis.improved_goal.title}
                </div>
                <div className="improved-field">
                  <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {goalAnalysis.improved_goal.description}
                </div>
              </div>
              <button className="btn secondary" onClick={applyImprovedGoal}>
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
              </button>
            </div>
          )}
        </div>

        {error && <div className="alert error">{error}</div>}

        <div className="analysis-actions">
          <button className="btn secondary" onClick={editGoal}>
            ‚Üê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å
          </button>
          <button
            className="btn success"
            onClick={handleSaveGoal}
            disabled={saving}
          >
            {saving ? (
              <>
                <div className="spinner" />
                –°–æ—Ö—Ä–∞–Ω—è–µ–º...
              </>
            ) : (
              '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å'
            )}
          </button>
        </div>
      </div>
    );
  };

  const renderSavedStep = () => (
    <div className="card">
      <div className="success-message">
        <div className="success-icon">üéâ</div>
        <h3>–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</h3>
        <p className="muted">–í–∞—à–∞ SMART-—Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.</p>

        <div className="wizard-actions">
          <button className="btn secondary" onClick={resetForm}>
            ‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É —Ü–µ–ª—å
          </button>
          <button className="btn primary" onClick={() => navigate('/profile')}>
            üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é
          </button>
        </div>
      </div>
    </div>
  );

  const getSmartLabel = (key: string): string => {
    const labels: { [key: string]: string } = {
      specific: 'S ‚Äî –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å',
      measurable: 'M ‚Äî –ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å',
      achievable: 'A ‚Äî –î–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å',
      relevant: 'R ‚Äî –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å',
      time_bound: 'T ‚Äî –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏'
    };
    return labels[key] || key;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏
  const handleEditGoal = (goal: SmartGoal) => {
    setEditingGoal(goal);
    setForm({
      title: goal.title,
      description: goal.description,
      deadline: goal.deadline ? new Date(goal.deadline).toISOString().slice(0, 10) : '',
      priority: goal.priority,
    });
    setCurrentStep('input');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
  const handleDeleteGoal = (goalId: string) => {
    setDeletingGoal(goalId);
    setShowDeleteConfirm(goalId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
  const handleCancelDelete = () => {
    setShowDeleteConfirm(null);
    setDeletingGoal(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
  const handleConfirmDelete = async () => {
    if (!deletingGoal) return;

    setLoadingGoals(true);
    setError(null);

    try {
      // –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await api.delete(`/ai/goals/${deletingGoal}`);

      setSuccess('–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
      await loadGoals();
    } catch (e: any) {
      setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å');
    } finally {
      setLoadingGoals(false);
      setShowDeleteConfirm(null);
      setDeletingGoal(null);
    }
  };

  return (
    <div className="goals-page">
      <div className="goals-header">
        <h2>üéØ –ú–æ–∏ —Ü–µ–ª–∏</h2>
        <div className="goals-header-actions">
          <button className="link-btn" onClick={() => navigate('/profile')}>
            üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é
          </button>
        </div>
      </div>

      <div className="goals-layout">
        {/* Wizard Section */}
        <div className="wizard">
          <div className="steps">
            <div className={`step ${currentStep === 'input' ? 'active' : (currentStep === 'analysis' || currentStep === 'saved') ? 'done' : ''}`}>
              <span className="step-index">1</span>
              <span className="step-title">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</span>
            </div>
            <div className={`step ${currentStep === 'analysis' ? 'active' : currentStep === 'saved' ? 'done' : ''}`}>
              <span className="step-index">2</span>
              <span className="step-title">–ê–Ω–∞–ª–∏–∑ –ò–ò</span>
            </div>
            <div className={`step ${currentStep === 'saved' ? 'active' : ''}`}>
              <span className="step-index">3</span>
              <span className="step-title">–ì–æ—Ç–æ–≤–æ</span>
            </div>
          </div>

          {currentStep === 'input' && renderInputStep()}
          {currentStep === 'analysis' && renderAnalysisStep()}
          {currentStep === 'saved' && renderSavedStep()}

          {success && <div className="alert success">{success}</div>}
        </div>

        {/* Goals List Section */}
        <div className="goals-list">
          <div className="goals-list-header">
            <h3>üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏</h3>
            <div className="filter-toggle">
              <button
                className={`filter-option ${!showAllGoals ? 'active' : ''}`}
                onClick={() => setShowAllGoals(false)}
              >
                –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ
              </button>
              <button
                className={`filter-option ${showAllGoals ? 'active' : ''}`}
                onClick={() => setShowAllGoals(true)}
              >
                –í—Å–µ —Ü–µ–ª–∏
              </button>
            </div>
          </div>

          <div className="goals-list-content">
            {loadingGoals ? (
              <div className="loading-spinner">
                <div className="spinner" />
                –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏...
              </div>
            ) : goals.length === 0 ? (
              <div className="empty-state">
                <h4>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</h4>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é SMART-—Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º—ã —Å–ª–µ–≤–∞</p>
              </div>
            ) : (
              goals.map((goal) => (
                <div key={goal.id} className="goal-item">
                  <div className="goal-header">
                    <div>
                      <h4 className="goal-title">{goal.title}</h4>
                      <div className="goal-meta">
                        <span className={`priority-badge priority-${goal.priority}`}>
                          {priorityOptions.find(p => p.value === goal.priority)?.label}
                        </span>
                        {goal.deadline && (
                          <span>
                            üìÖ –¥–æ {new Date(goal.deadline).toLocaleDateString('ru-RU')}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>

                  <p className="goal-description">{goal.description}</p>

                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç SMART –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò */}
                  {goal.smart_analysis && (
                    <div className="analysis-card">
                      <div className="analysis-score">
                        <div className={`score-circle ${goal.smart_analysis.overall_score >= 80 ? 'score-high' : goal.smart_analysis.overall_score >= 50 ? 'score-medium' : 'score-low'}`}>
                          {goal.smart_analysis.overall_score || 'N/A'}
                        </div>
                        <div>
                          <div className="score-status">
                            {goal.smart_analysis.is_smart ? '‚úÖ SMART' : '‚ùå –ù–µ SMART'}
                          </div>
                          <div className="score-description">
                            –ê–Ω–∞–ª–∏–∑ –ò–ò: {goal.smart_analysis.overall_score || 'N/A'}/100
                          </div>
                        </div>
                      </div>

                      {goal.smart_analysis.suggestions && goal.smart_analysis.suggestions.length > 0 && (
                        <div className="analysis-suggestions">
                          <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:</h4>
                          <ul>
                            {goal.smart_analysis.suggestions.slice(0, 3).map((suggestion: string, index: number) => (
                              <li key={index}>{suggestion}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  )}

                  <div className="goal-actions">
                    <button className="btn secondary" onClick={() => handleEditGoal(goal)}>
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button
                      className="btn primary"
                      onClick={() => goal.id && createEventForGoal(goal)}
                      disabled={!goal.id || creatingEvents[goal.id!] || !!createdEvents[goal.id!]}
                    >
                      {creatingEvents[goal.id!] ? (
                        <>
                          <div className="spinner" />
                          –°–æ–∑–¥–∞—ë–º...
                        </>
                      ) : createdEvents[goal.id!] ? (
                        '‚úÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ'
                      ) : (
                        'üìÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
                      )}
                    </button>
                    {createdEvents[goal.id!] && (
                      <button
                        className="btn danger"
                        onClick={() => deleteEventForGoal(goal)}
                        disabled={creatingEvents[goal.id!]}
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ãÔøΩÔøΩ–∏–µ
                      </button>
                    )}
                    <button
                      className="btn danger"
                      onClick={() => goal.id && handleDeleteGoal(goal.id)}
                      disabled={!goal.id}
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏ */}
      {showDeleteConfirm && (
        <div className="modal-overlay" onClick={handleCancelDelete}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <h3>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, ÔøΩÔøΩ—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
            <div className="modal-actions">
              <button className="btn secondary" onClick={handleCancelDelete}>
                –û—Ç–º–µ–Ω–∞
              </button>
              <button className="btn danger" onClick={handleConfirmDelete} disabled={loadingGoals}>
                {loadingGoals ? (
                  <>
                    <div className="spinner" />
                    –£–¥–∞–ª—è–µ–º...
                  </>
                ) : (
                  'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å'
                )}
              </button>
            </div>
            {error && <div className="alert error">{error}</div>}
          </div>
        </div>
      )}
    </div>
  );
};

export default Goals;

