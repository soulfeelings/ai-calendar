import React, { useState } from 'react';
import { aiService, CalendarAnalysis as AICalendarAnalysis, SmartGoal as AISmartGoal, ScheduleChange as AIScheduleChange } from '../services/aiService';
import { calendarService, CalendarEvent } from '../services/calendarService';
import recommendationsCacheService from '../services/recommendationsCacheService';
import GoalsWarningModal from './GoalsWarningModal';
import './Recommendations.css';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ aiService –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö
type CalendarAnalysis = AICalendarAnalysis;
type SmartGoal = AISmartGoal;
type ScheduleChange = AIScheduleChange;

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
type ViewMode = 'selection' | 'week' | 'tomorrow' | 'analysis' | 'general';
type TimeSlot = {
  time: string;
  events: CalendarEvent[];
  isFree: boolean;
  isOptimal: boolean;
  suggestion?: string;
};

interface DayData {
  date: Date;
  dateStr: string;
  dayName: string;
  timeSlots: TimeSlot[];
  totalEvents: number;
  freeHours: number;
  optimalSlots: number;
}

interface WeekData {
  days: DayData[];
  weekRange: string;
  totalFreeHours: number;
  busyDays: number;
}

// –ö–æÔøΩÔøΩ–øÔøΩÔøΩ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞
const AnalysisSelector: React.FC<{
  onSelectMode: (mode: 'week' | 'tomorrow' | 'general') => void;
}> = ({ onSelectMode }) => {
  const [cacheInfo, setCacheInfo] = useState<any>(null);
  const [generalAnalysisResult, setGeneralAnalysisResult] = useState<CalendarAnalysis | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ΩÔøΩÔøΩÔøΩÔøΩ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    const info = recommendationsCacheService.getCacheInfo();
    setCacheInfo(info);
  }, []);

  const handleClearCache = () => {
    recommendationsCacheService.clearAllRecommendations();
    const info = recommendationsCacheService.getCacheInfo();
    setCacheInfo(info);
    console.log('üßπ Cache cleared successfully');
  };

  return (
    <div className="analysis-selector">
      <div className="selector-header">
        <h2>ü§ñ AI –ö–∞–ª–µ–Ω–¥–∞—Ä—å</h2>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ */}
        {cacheInfo && cacheInfo.total > 0 && (
          <div className="cache-info">
            <div className="cache-summary">
              üì¶ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ: {cacheInfo.total} –∞–Ω–∞–ª–∏–∑–æ–≤
              (üìÖ {cacheInfo.byType.week} –Ω–µ–¥–µ–ª—å–Ω—ã—Ö, üåÖ {cacheInfo.byType.tomorrow} –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö)
            </div>
            <button className="clear-cache-btn" onClick={handleClearCache}>
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
            </button>
          </div>
        )}
      </div>

      <div className="mode-cards">
        <div
          className="mode-card general-card"
          onClick={() => onSelectMode('general')}
        >
          <div className="mode-icon">üìä</div>
          <h3>–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</h3>
          <p>–í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</p>
          <div className="mode-features">
            <span>‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</span>
            <span>‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</span>
            <span>‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º</span>
            <span>‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è</span>
          </div>
          <div className="mode-cta">–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ ‚Üí</div>
        </div>

        <div
          className="mode-card week-card"
          onClick={() => onSelectMode('week')}
        >
          <div className="mode-icon">üìÖ</div>
          <h3>–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</h3>
          <p>–ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π</p>
          <div className="mode-features">
            <span>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π</span>
            <span>‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏</span>
            <span>‚Ä¢ –£—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤</span>
            <span>‚Ä¢ –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é</span>
          </div>
          <div className="mode-cta">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Üí</div>
        </div>

        <div
          className="mode-card tomorrow-card"
          onClick={() => onSelectMode('tomorrow')}
        >
          <div className="mode-icon">üåÖ</div>
          <h3>–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</h3>
          <p>–ò–ò —Å–æ—Å—Ç–∞–≤–∏—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π</p>
          <div className="mode-features">
            <span>‚Ä¢ –§–æ–∫ÔøΩÔøΩ—Å –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π</span>
            <span>‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á</span>
            <span>‚Ä¢ –£—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤</span>
            <span>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞</span>
          </div>
          <div className="mode-cta">–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Üí</div>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ */}
      {generalAnalysisResult && (
        <div className="general-analysis-result">
          <div className="analysis-header">
            <h3>üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</h3>
            <button
              className="close-analysis-btn"
              onClick={() => setGeneralAnalysisResult(null)}
            >
              ‚úï
            </button>
          </div>

          <div className="analysis-content">
            {generalAnalysisResult.summary && (
              <div className="analysis-summary">
                <h4>üìù –°–≤–æ–¥–∫–∞</h4>
                <p>{generalAnalysisResult.summary}</p>
              </div>
            )}

            {generalAnalysisResult.recommendations && generalAnalysisResult.recommendations.length > 0 && (
              <div className="analysis-recommendations">
                <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                <div className="recommendations-list">
                  {generalAnalysisResult.recommendations.map((rec, index) => (
                    <div key={index} className="recommendation-item">
                      <span className="rec-bullet">‚Ä¢</span>
                      <span>{rec}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {generalAnalysisResult.productivity_score !== undefined && (
              <div className="productivity-score">
                <h4>‚ö° –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
                <div className="score-display">
                  <span className="score-number">{generalAnalysisResult.productivity_score}%</span>
                  <div className="score-bar">
                    <div
                      className="score-fill"
                      style={{
                        width: `${generalAnalysisResult.productivity_score}%`,
                        backgroundColor: generalAnalysisResult.productivity_score >= 70 ? '#6bcf7f' :
                                       generalAnalysisResult.productivity_score >= 50 ? '#ffd93d' : '#ff6b6b'
                      }}
                    ></div>
                  </div>
                </div>
              </div>
            )}

            {generalAnalysisResult.goal_alignment && (
              <div className="goal-alignment">
                <h4>üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º</h4>
                <p>{generalAnalysisResult.goal_alignment}</p>
              </div>
            )}

            {generalAnalysisResult.schedule_changes && generalAnalysisResult.schedule_changes.length > 0 && (
              <div className="general-changes">
                <h4>‚ö° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è</h4>
                <div className="changes-list">
                  {generalAnalysisResult.schedule_changes.map((change, index) => (
                    <div key={index} className="change-item">
                      <div className="change-title">
                        <span className="change-icon">{change.action === 'create' ? '‚ûï' : 'üîÑ'}</span>
                        <strong>{change.title}</strong>
                      </div>
                      <p className="change-reason">{change.reason}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–ΩÔøΩÔøΩ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
const TimelineView: React.FC<{
  dayData: DayData;
  showSuggestions: boolean;
  onApplySuggestion: (time: string, suggestion: string) => void;
}> = ({ dayData, showSuggestions, onApplySuggestion }) => {
  return (
    <div className="timeline-view">
      <div className="timeline-header">
        <h3>{dayData.dayName}</h3>
        <span className="date-label">{dayData.dateStr}</span>
        <div className="day-stats">
          <span className="stat">üìÖ {dayData.totalEvents} —Å–æ–±—ã—Ç–∏–π</span>
          <span className="stat">‚è∞ {dayData.freeHours}—á —Å–≤–æ–±–æ–¥–Ω–æ</span>
          <span className="stat">‚ú® {dayData.optimalSlots} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</span>
        </div>
      </div>

      <div className="timeline-slots">
        {dayData.timeSlots.map((slot, index) => (
          <div
            key={index}
            className={`time-slot ${slot.isFree ? 'free' : 'busy'} ${slot.isOptimal ? 'optimal' : ''}`}
          >
            <div className="slot-time">{slot.time}</div>
            <div className="slot-content">
              {slot.events.length > 0 ? (
                <div className="slot-events">
                  {slot.events.map((event, i) => (
                    <div key={i} className="slot-event">{event.summary}</div>
                  ))}
                </div>
              ) : (
                <div className="slot-free">
                  {slot.isOptimal && <span className="optimal-badge">‚ú® –û–ø—Ç–∏–º–∞–ª—å–Ω–æ</span>}
                  –°–≤–æ–±–æ–¥–Ω–æ
                </div>
              )}

              {showSuggestions && slot.suggestion && (
                <div className="slot-suggestion">
                  <div className="suggestion-text">{slot.suggestion}</div>
                  <button
                    className="apply-suggestion-btn"
                    onClick={() => onApplySuggestion(slot.time, slot.suggestion!)}
                  >
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞
const WeekView: React.FC<{
  weekData: WeekData;
  recommendations: string[];
  scheduleChanges: ScheduleChange[];
  onApplyChange: (change: ScheduleChange) => void;
  onRejectChange: (change: ScheduleChange) => void;
  onCreateEvent?: (change: ScheduleChange) => void;
  onRejectEvent?: (change: ScheduleChange) => void;
}> = ({ weekData, recommendations, scheduleChanges, onApplyChange, onRejectChange, onCreateEvent, onRejectEvent }) => {
  return (
    <div className="week-view">
      <div className="week-header">
        <h2>üìÖ –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</h2>
        <div className="week-range">{weekData.weekRange}</div>
        <div className="week-summary">
          <div className="summary-card">
            <span className="summary-number">{scheduleChanges.length}</span>
            <span className="summary-label">–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</span>
          </div>
          <div className="summary-card">
            <span className="summary-number">{7 - weekData.busyDays}</span>
            <span className="summary-label">–¥–Ω–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</span>
          </div>
          <div className="summary-card">
            <span className="summary-number">{weekData.totalFreeHours}</span>
            <span className="summary-label">—á–∞—Å–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ</span>
          </div>
        </div>
      </div>

      <div className="week-grid">
        {weekData.days.map((day, index) => (
          <div key={index} className="day-card">
            <div className="day-header">
              <h4>{day.dayName}</h4>
              <span className="day-date">{day.date.getDate()}</span>
            </div>
            <div className="day-preview">
              <div className="day-stats">
                <span>üìÖ {day.totalEvents}</span>
                <span>‚è∞ {day.freeHours}—á</span>
              </div>
              <div className="day-load-bar">
                <div
                  className="load-fill"
                  style={{
                    width: `${Math.min(100, (day.totalEvents / 8) * 100)}%`,
                    backgroundColor: day.totalEvents > 6 ? '#ff6b6b' : day.totalEvents > 3 ? '#ffd93d' : '#6bcf7f'
                  }}
                ></div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {recommendations.length > 0 && (
        <div className="recommendations-section">
          <h3>ü§ñ AI –†–µ–∫–æ–º–µÔøΩÔøΩ–¥–∞—Ü–∏–∏</h3>
          <div className="recommendations-grid">
            {recommendations.map((rec, index) => (
              <div key={index} className="recommendation-card-new">
                <div className="rec-icon">üí°</div>
                <p>{rec}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {scheduleChanges.length > 0 && (
        <div className="changes-section">
          <h3>‚ö° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</h3>
          <div className="changes-grid">
            {scheduleChanges.map((change, index) => (
              <ScheduleChangeCardNew
                key={index}
                change={change}
                onApply={() => onApplyChange(change)}
                onReject={() => onRejectChange(change)}
                onCreateEvent={onCreateEvent}
                onRejectEvent={onRejectEvent}
              />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const ScheduleChangeCardNew: React.FC<{
  change: ScheduleChange;
  onApply: () => void;
  onReject: () => void;
  onCreateEvent?: (change: ScheduleChange) => void;
  onRejectEvent?: (change: ScheduleChange) => void;
}> = ({ change, onApply, onReject, onCreateEvent, onRejectEvent }) => {
  const getActionIcon = (action: string) => {
    switch (action.toLowerCase()) {
      case 'move': return 'üìÖ';
      case 'reschedule': return '‚è∞';
      case 'cancel': return '‚ùå';
      case 'optimize': return '‚ö°';
      case 'create': return '‚ûï';
      case 'add': return '‚ûï';
      default: return 'üîÑ';
    }
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority) {
      case 'high': return '#ff6b6b';
      case 'medium': return '#ffd93d';
      case 'low': return '#6bcf7f';
      default: return '#a0a0a0';
    }
  };

  const formatDateTime = (dateTimeStr: string) => {
    try {
      return new Date(dateTimeStr).toLocaleString('ru-RU');
    } catch {
      return dateTimeStr;
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–º —Å–æ–±—ã—Ç–∏–µ–º
  const isNewEvent = change.is_new_event || 
                     change.action.toLowerCase() === 'create' ||
                     change.action.toLowerCase() === 'add' ||
                     (!change.new_start && !change.new_end && change.title);

  return (
    <div className="schedule-change-card-new">
      <div className="change-header-new">
        <div className="change-icon">{getActionIcon(change.action)}</div>
        <div className="change-title-new">
          <h4>{change.title}</h4>
          <div className="change-meta">
            {change.priority && (
              <div
                className="priority-indicator"
                style={{ backgroundColor: getPriorityColor(change.priority) }}
              >
                {change.priority}
              </div>
            )}
            {isNewEvent && (
              <div className="new-event-badge">
                ‚ú® –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="change-body-new">
        <p className="change-reason-new">{change.reason}</p>

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π */}
        {isNewEvent && (change.new_start || change.new_end) && (
          <div className="event-details">
            <h5>üìÖ –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:</h5>
            {change.new_start && (
              <div className="event-detail">
                <span className="detail-label">üìÖ –ù–∞—á–∞–ª–æ:</span>
                <span className="detail-value">{formatDateTime(change.new_start)}</span>
              </div>
            )}
            {change.new_end && (
              <div className="event-detail">
                <span className="detail-label">üïò –ö–æ–Ω–µ—Ü:</span>
                <span className="detail-value">{formatDateTime(change.new_end)}</span>
              </div>
            )}
            {change.description && (
              <div className="event-detail">
                <span className="detail-label">üìù –û–ø–∏—Å–∞–Ω–∏–µ:</span>
                <span className="detail-value">{change.description}</span>
              </div>
            )}
            {change.location && (
              <div className="event-detail">
                <span className="detail-label">üìç –úÔøΩÔøΩ—Å—Ç–æ:</span>
                <span className="detail-value">{change.location}</span>
              </div>
            )}
          </div>
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π */}
        {!isNewEvent && (change.new_start || change.new_end) && (
          <div className="change-time-new">
            {change.new_start && (
              <div className="time-change">
                <span className="time-label">–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</span>
                <span className="time-value">
                  {formatDateTime(change.new_start)}
                </span>
              </div>
            )}
            {change.new_end && (
              <div className="time-change">
                <span className="time-label">–ùÔøΩÔøΩ–≤ÔøΩÔøΩ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
                <span className="time-value">
                  {formatDateTime(change.new_end)}
                </span>
              </div>
            )}
          </div>
        )}
      </div>

      <div className="change-actions-new">
        {isNewEvent ? (
          // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
          <>
            <button 
              className="add-event-btn" 
              onClick={() => onCreateEvent?.(change)}
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            </button>
            <button 
              className="reject-event-btn" 
              onClick={() => onRejectEvent?.(change)}
            >
              ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
          </>
        ) : (
          // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
          <>
            <button className="apply-btn-new" onClick={onApply}>
              ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </button>
            <button className="reject-btn-new" onClick={onReject}>
              ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
          </>
        )}
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Recommendations
const Recommendations: React.FC = () => {
  const [analysis, setAnalysis] = useState<CalendarAnalysis | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [, setGoals] = useState<SmartGoal[]>([]);

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
  const [viewMode, setViewMode] = useState<ViewMode>('selection');
  const [weekData, setWeekData] = useState<WeekData | null>(null);
  const [tomorrowData, setTomorrowData] = useState<DayData | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ü–µ–ª—è—Ö
  const [showGoalsWarning, setShowGoalsWarning] = useState(false);
  const [pendingMode, setPendingMode] = useState<'week' | 'tomorrow' | null>(null);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  const createTimeSlots = (date: Date, events: CalendarEvent[]): TimeSlot[] => {
    const slots: TimeSlot[] = [];
    const dayEvents = events.filter(event => {
      const eventDate = new Date(event.start?.dateTime || event.start?.date || '');
      return eventDate.toDateString() === date.toDateString();
    });

    for (let hour = 6; hour < 23; hour++) {
      const timeStr = `${hour.toString().padStart(2, '0')}:00`;
      const slotEvents = dayEvents.filter(event => {
        const eventStart = new Date(event.start?.dateTime || event.start?.date || '');
        return eventStart.getHours() === hour;
      });

      const isFree = slotEvents.length === 0;
      const isOptimal = isFree && ((hour >= 9 && hour <= 11) || (hour >= 14 && hour <= 16));

      slots.push({
        time: timeStr,
        events: slotEvents,
        isFree,
        isOptimal,
        suggestion: isOptimal ? '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á' : undefined
      });
    }

    return slots;
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è
  const createDayData = (date: Date, events: CalendarEvent[]): DayData => {
    const timeSlots = createTimeSlots(date, events);
    const dayEvents = events.filter(event => {
      const eventDate = new Date(event.start?.dateTime || event.start?.date || '');
      return eventDate.toDateString() === date.toDateString();
    });

    return {
      date,
      dateStr: date.toLocaleDateString('ru-RU'),
      dayName: date.toLocaleDateString('ru-RU', { weekday: 'long' }),
      timeSlots,
      totalEvents: dayEvents.length,
      freeHours: timeSlots.filter(slot => slot.isFree).length,
      optimalSlots: timeSlots.filter(slot => slot.isOptimal).length
    };
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–µ–ª–∏
  const createWeekData = (startDate: Date, events: CalendarEvent[]): WeekData => {
    const days: DayData[] = [];
    let totalFreeHours = 0;
    let busyDays = 0;

    for (let i = 0; i < 7; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      const dayData = createDayData(date, events);
      days.push(dayData);
      totalFreeHours += dayData.freeHours;
      if (dayData.totalEvents > 0) busyDays++;
    }

    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);

    return {
      days,
      weekRange: `${startDate.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}`,
      totalFreeHours,
      busyDays
    };
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
  const handleModeSelect = async (mode: 'week' | 'tomorrow' | 'general') => {
    // –î–ª—è —Ä–µ–∂–∏–º–æ–≤ week –∏ tomorrow —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–π
    if (mode === 'week' || mode === 'tomorrow') {
      try {
        console.log(`üîç Checking goals for ${mode} mode...`);
        const goalsData = await aiService.getGoals(true).catch(() => []);

        if (!Array.isArray(goalsData) || goalsData.length === 0) {
          console.log('‚ùå No goals found, showing warning modal');
          setPendingMode(mode);
          setShowGoalsWarning(true);
          return;
        }
      } catch (error) {
        console.error('‚ùå Error checking goals:', error);
        setPendingMode(mode);
        setShowGoalsWarning(true);
        return;
      }
    }

    setLoading(true);
    setError(null);

    try {
      if (mode === 'general') {
        // –î–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
        console.log('üîç Starting general calendar analysis...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æÔøΩÔøΩ—ã—Ç–∏—è –∏ —Ü–µ–ª–∏
        const [eventsData, goalsData] = await Promise.all([
          calendarService.getEvents(true),
          aiService.getGoals(true).catch(() => [])
        ]);

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        const relevantEvents = eventsData.filter(event => {
          let endDate: Date;

          if (event.end?.dateTime) {
            endDate = new Date(event.end.dateTime);
          } else if (event.end?.date) {
            endDate = new Date(event.end.date);
          } else if (event.start?.dateTime) {
            endDate = new Date(event.start.dateTime);
          } else if (event.start?.date) {
            endDate = new Date(event.start.date);
          } else {
            return false;
          }

          return endDate >= new Date();
        });
        console.log(`üìÖ Filtered ${relevantEvents.length} relevant events from ${eventsData.length} total events`);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const requestData = {
          calendar_events: relevantEvents,
          user_goals: Array.isArray(goalsData) ? goalsData : [],
          analysis_period_days: 30,
          analysis_type: 'general' as const
        };

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const analysisResult = await aiService.analyzeCalendar(requestData);
        console.log('‚úÖ General analysis completed:', analysisResult);

        setAnalysis(analysisResult);
        setViewMode('general');
        return;
      }

      // –î–ª—è week –∏ tomorrow —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      console.log(`üéØ Creating full schedule for ${mode} based on user goals only...`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
      const goalsData = await aiService.getGoals(true).catch(() => []);

      if (!Array.isArray(goalsData) || goalsData.length === 0) {
        setError('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–¶–µ–ª–∏" –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å.');
        setLoading(false);
        return;
      }

      setGoals(goalsData);

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è week –∏ tomorrow)
      const scheduleRequest = {
        schedule_type: mode as 'week' | 'tomorrow', // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
        user_goals: goalsData,
        ignore_existing_events: true,
        work_hours_start: '09:00',
        work_hours_end: '18:00',
        break_duration_minutes: 15,
        buffer_between_events_minutes: 10
      };

      console.log(`ü§ñ Requesting AI to create full ${mode} schedule...`);
      console.log('üìã Request data:', scheduleRequest);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò
      const scheduleResult = await aiService.createFullSchedule(scheduleRequest);

      console.log('‚úÖ Full schedule created:', scheduleResult);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (mode === 'week') {
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        const weekData = createWeekDataFromSchedule(scheduleResult.schedules);
        setWeekData(weekData);
        setViewMode('week');

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç CalendarAnalysis –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const analysisResult = {
          summary: scheduleResult.reasoning || '–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π',
          recommendations: scheduleResult.recommendations || [],
          schedule_changes: convertSchedulesToChanges(scheduleResult.schedules),
          productivity_score: scheduleResult.productivity_score,
          goal_alignment: `–ê–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —Ü–µ–ª–µ–π: ${scheduleResult.total_goals_addressed || 0}`
        };
        setAnalysis(analysisResult);
      } else {
        // –î–ª—è –∑–∞–≤—Ç—Ä–∞—à–ΩÔøΩÔøΩ–≥–æ –¥–Ω—è
        const tomorrowSchedule = scheduleResult.schedules[0];
        if (tomorrowSchedule) {
          const tomorrowData = createDayDataFromSchedule(tomorrowSchedule);
          setTomorrowData(tomorrowData);
          setViewMode('tomorrow');

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ÔøΩÔøΩ–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç CalendarAnalysis
          const analysisResult = {
            summary: scheduleResult.reasoning || '–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π',
            recommendations: scheduleResult.recommendations || [],
            schedule_changes: convertSchedulesToChanges([tomorrowSchedule]),
            productivity_score: scheduleResult.productivity_score,
            goal_alignment: `–ê–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —Ü–µ–ª–µ–π: ${scheduleResult.total_goals_addressed || 0}`
          };
          setAnalysis(analysisResult);
        }
      }
    } catch (err: any) {
      console.error('‚ùå Error creating schedule:', err);
      setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–µ–ª–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const createWeekDataFromSchedule = (schedules: any[]): WeekData => {
    const days: DayData[] = [];
    let totalFreeHours = 0;
    let busyDays = 0;

    schedules.forEach((schedule, index) => {
      const date = new Date();
      date.setDate(date.getDate() + index);

      const dayData = createDayDataFromSchedule(schedule, date);
      days.push(dayData);
      totalFreeHours += dayData.freeHours;
      if (dayData.totalEvents > 0) busyDays++;
    });

    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(startDate.getDate() + 6);

    return {
      days,
      weekRange: `${startDate.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}`,
      totalFreeHours,
      busyDays
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const createDayDataFromSchedule = (schedule: any, date?: Date): DayData => {
    const dayDate = date || new Date(schedule.date);
    const events = schedule.events || [];

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    const slots: TimeSlot[] = [];
    for (let hour = 6; hour < 23; hour++) {
      const timeStr = `${hour.toString().padStart(2, '0')}:00`;
      const slotEvents = events.filter((event: any) => {
        const eventStart = new Date(event.start_time);
        return eventStart.getHours() === hour;
      }).map((event: any) => ({
        summary: event.title,
        start: { dateTime: event.start_time },
        end: { dateTime: event.end_time }
      }));

      const isFree = slotEvents.length === 0;
      const isOptimal = isFree && ((hour >= 9 && hour <= 11) || (hour >= 14 && hour <= 16));

      slots.push({
        time: timeStr,
        events: slotEvents,
        isFree,
        isOptimal,
        suggestion: isOptimal ? '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á' : undefined
      });
    }

    return {
      date: dayDate,
      dateStr: dayDate.toLocaleDateString('ru-RU'),
      dayName: dayDate.toLocaleDateString('ru-RU', { weekday: 'long' }),
      timeSlots: slots,
      totalEvents: events.length,
      freeHours: slots.filter(slot => slot.isFree).length,
      optimalSlots: slots.filter(slot => slot.isOptimal).length
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const convertSchedulesToChanges = (schedules: any[]): ScheduleChange[] => {
    const changes: ScheduleChange[] = [];

    schedules.forEach(schedule => {
      if (schedule.events) {
        schedule.events.forEach((event: any, index: number) => {
          changes.push({
            id: `schedule-${schedule.date}-${index}`,
            action: 'create',
            title: event.title,
            reason: event.description || `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: ${event.goal_id || '–æ–±—â–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}`,
            new_start: event.start_time,
            new_end: event.end_time,
            priority: event.priority || 'medium',
            description: event.description,
            is_new_event: true
          });
        });
      }
    });

    return changes;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleApplyChange = async (change: ScheduleChange) => {
    console.log('Applying change:', change);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
  };

  const handleRejectChange = (change: ScheduleChange) => {
    console.log('Rejecting change:', change);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  };

  const handleApplySuggestion = (time: string, suggestion: string) => {
    console.log('Applying suggestion:', time, suggestion);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  };

  // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ò–ò
  const handleCreateEvent = async (change: ScheduleChange) => {
    try {
      setLoading(true);

      // ÔøΩÔøΩ–æ–¥–≥ÔøΩÔøΩ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
      const eventData = {
        summary: change.title,
        description: change.description || change.reason,
        start: {
          dateTime: change.new_start!,
          timeZone: 'Europe/Moscow'
        },
        end: {
          dateTime: change.new_end!,
          timeZone: 'Europe/Moscow'
        },
        location: change.location,
        ...(change.recurrence?.rrule && {
          recurrence: [change.recurrence.rrule]
        })
      };

      console.log('üÜï Creating new event from AI recommendation:', eventData);

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ API
      const result = await aiService.createCalendarEvent(eventData);

      if (result.status === 'success') {
        // –£–¥–∞–ª—è–µ–º —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setAnalysis(prev => {
          if (!prev) return prev;
          return {
            ...prev,
            schedule_changes: prev.schedule_changes.filter(c => c.id !== change.id)
          };
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–øÔøΩÔøΩ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è timeline
        const eventsData = await calendarService.getEvents(true);
        if (viewMode === 'tomorrow') {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 1);
          const updatedTomorrowData = createDayData(tomorrow, eventsData);
          setTomorrowData(updatedTomorrowData);
        } else if (viewMode === 'week') {
          const startOfWeek = new Date();
          startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1);
          const updatedWeekData = createWeekData(startOfWeek, eventsData);
          setWeekData(updatedWeekData);
        }
      }
    } catch (error: any) {
      console.error('‚ùå Error creating event:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleRejectEvent = async (change: ScheduleChange) => {
    try {
      console.log('‚ùå Rejecting AI event recommendation:', change.id);

      // –û—Ç–∫–ª–æ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
      await aiService.rejectScheduleChange(change.id, viewMode as 'week' | 'tomorrow' | 'general');

      // –£–¥–∞–ª—è–µ–º —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setAnalysis(prev => {
        if (!prev) return prev;
        return {
          ...prev,
          schedule_changes: prev.schedule_changes.filter(c => c.id !== change.id)
        };
      });

      console.log('‚úÖ AI recommendation rejected and removed from display');
    } catch (error: any) {
      console.error('‚ùå Error rejecting event:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: ${error.message}`);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ü–µ–ª—è—Ö
  const handleGoalsWarningClose = () => {
    setShowGoalsWarning(false);
    setPendingMode(null);
  };

  const handleGoToGoals = () => {
    setShowGoalsWarning(false);
    setPendingMode(null);
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–¥–µ–ª—É —Ü–µ–ª–µ–π
    window.location.href = '/goals';
  };

  const handleBackToSelection = () => {
    setViewMode('selection');
    setAnalysis(null);
    setWeekData(null);
    setTomorrowData(null);
  };

  // –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="recommendations-container">
        <div className="loading-screen">
          <div className="ai-brain">ü§ñ</div>
          <h2>AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å...</h2>
          <div className="loading-steps">
            <div className="step active"> –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π</div>
            <div className="step active"> –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π</div>
            <div className="step active">‚ö° –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>
          </div>
        </div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className="recommendations-container">
        <div className="error-screen">
          <div className="error-icon">‚ùå</div>
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æÔøΩÔøΩ–∏–±–∫–∞</h2>
          <p>{error}</p>
          <button className="retry-btn" onClick={() => setViewMode('selection')}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
  return (
    <div className="recommendations-container">
      {viewMode === 'selection' && (
        <AnalysisSelector onSelectMode={handleModeSelect} />
      )}

      {viewMode === 'general' && analysis && (
        <div className="general-analysis-container">
          <button className="back-btn" onClick={handleBackToSelection}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É
          </button>
          <div className="general-analysis-header">
            <h2>–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</h2>
          </div>

          <div className="analysis-content">
            <div className="analysis-summary">
              <h3>üìã –û–±—â–∏–π –≤—ã–≤–æ–¥</h3>
              <p>{analysis.summary}</p>
              {analysis.productivity_score && (
                <div className="productivity-score">
                  <span>–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <strong>{analysis.productivity_score}/100</strong></span>
                </div>
              )}
              {analysis.goal_alignment && (
                <div className="goal-alignment">
                  <span>{analysis.goal_alignment}</span>
                </div>
              )}
            </div>

            {analysis.recommendations && analysis.recommendations.length > 0 && (
              <div className="recommendations-section">
                <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                <div className="recommendations-grid">
                  {analysis.recommendations.map((rec, index) => (
                    <div key={index} className="recommendation-card-new">
                      <div className="rec-icon">üí°</div>
                      <p>{rec}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {analysis.schedule_changes && analysis.schedule_changes.length > 0 && (
              <div className="changes-section">
                <h3>‚ö° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</h3>
                <div className="changes-grid">
                  {analysis.schedule_changes.map((change, index) => (
                    <ScheduleChangeCardNew
                      key={index}
                      change={change}
                      onApply={() => handleApplyChange(change)}
                      onReject={() => handleRejectChange(change)}
                    />
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {viewMode === 'week' && weekData && (
        <div className="week-container">
          <button className="back-btn" onClick={handleBackToSelection}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É
          </button>
          <WeekView
            weekData={weekData}
            recommendations={analysis?.recommendations || []}
            scheduleChanges={analysis?.schedule_changes || []}
            onApplyChange={handleApplyChange}
            onRejectChange={handleRejectChange}
            onCreateEvent={handleCreateEvent}
            onRejectEvent={handleRejectEvent}
          />
        </div>
      )}

      {viewMode === 'tomorrow' && tomorrowData && (
        <div className="tomorrow-container">
          <button className="back-btn" onClick={handleBackToSelection}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É
          </button>
          <div className="tomorrow-header">
            <h2>üìÖ –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</h2>
            <p className="tomorrow-subtitle">
              {tomorrowData.dateStr} - {tomorrowData.dayName}
            </p>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è */}
          <div className="tomorrow-stats">
            <div className="stat-card">
              <span className="stat-number">{tomorrowData.totalEvents}</span>
              <span className="stat-label">—Å–æ–±—ã—Ç–∏–π</span>
            </div>
            <div className="stat-card">
              <span className="stat-number">{tomorrowData.freeHours}</span>
              <span className="stat-label">—á–∞—Å–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ</span>
            </div>
            <div className="stat-card">
              <span className="stat-number">{tomorrowData.optimalSlots}</span>
              <span className="stat-label">–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</span>
            </div>
          </div>

          {/* Timeline */}
          <TimelineView
            dayData={tomorrowData}
            showSuggestions={true}
            onApplySuggestion={handleApplySuggestion}
          />

          {/* AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {analysis?.recommendations && analysis.recommendations.length > 0 && (
            <div className="recommendations-section">
              <h3>ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</h3>
              <div className="recommendations-grid">
                {analysis.recommendations.map((rec, index) => (
                  <div key={index} className="recommendation-card-new">
                    <div className="rec-icon">üí°</div>
                    <p>{rec}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
          {analysis?.schedule_changes && analysis.schedule_changes.length > 0 && (
            <div className="changes-section">
              <h3>‚ö° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</h3>
              <div className="changes-grid">
                {analysis.schedule_changes.map((change, index) => (
                  <ScheduleChangeCardNew
                    key={index}
                    change={change}
                    onApply={() => handleApplyChange(change)}
                    onReject={() => handleRejectChange(change)}
                    onCreateEvent={handleCreateEvent}
                    onRejectEvent={handleRejectEvent}
                  />
                ))}
              </div>
            </div>
          )}

          {/* –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */}
          {(!analysis?.recommendations || analysis.recommendations.length === 0) &&
           (!analysis?.schedule_changes || analysis.schedule_changes.length === 0) && (
            <div className="no-recommendations">
              <div className="no-rec-icon">üéØ</div>
              <h3>–û—Ç–ª–∏—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</h3>
              <p>–í–∞—à –∑–∞–≤ÔøΩÔøΩ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω. AI –Ω–µ –Ω–∞—à–µ–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.</p>
            </div>
          )}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ü–µ–ª—è—Ö */}
      {showGoalsWarning && pendingMode && (
        <GoalsWarningModal
          isOpen={showGoalsWarning}
          mode={pendingMode}
          onClose={handleGoalsWarningClose}
          onGoToGoals={handleGoToGoals}
        />
      )}
    </div>
  );
};

export default Recommendations;
