import React, { useState, useEffect } from 'react';
import { aiService, CalendarAnalysis, SmartGoal, ScheduleChange } from '../services/aiService';
import { calendarService, CalendarEvent } from '../services/calendarService';
import './Recommendations.css';

interface RecommendationCardProps {
  recommendation: string;
}

const RecommendationCard: React.FC<RecommendationCardProps> = ({ recommendation }) => {
  return (
    <div className="recommendation-card">
      <div className="recommendation-content">
        <span className="recommendation-text">{recommendation}</span>
      </div>
    </div>
  );
};

interface ScheduleChangeCardProps {
  change: ScheduleChange;
  onApply: () => void;
  onReject: () => void;
  isApplying: boolean;
}

const ScheduleChangeCard: React.FC<ScheduleChangeCardProps> = ({ 
  change, 
  onApply,
  onReject,
  isApplying
}) => {
  const formatDateTime = (dateTimeStr: string) => {
    try {
      return new Date(dateTimeStr).toLocaleString('ru-RU');
    } catch {
      return dateTimeStr;
    }
  };

  const getActionIcon = (action: string) => {
    switch (action.toLowerCase()) {
      case 'move': return 'üìÖ';
      case 'reschedule': return '‚è∞';
      case 'cancel': return '‚ùå';
      case 'optimize': return '‚ö°';
      case 'create': return '‚ûï';
      default: return 'üîÑ';
    }
  };

  const getActionLabel = (action: string) => {
    switch (action.toLowerCase()) {
      case 'move': return '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏';
      case 'reschedule': return '–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
      case 'cancel': return '–û—Ç–º–µ–Ω–∏—Ç—å';
      case 'optimize': return '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
      case 'create': return '–°–æ–∑–¥–∞—Ç—å';
      default: return action;
    }
  };

  return (
    <div className="schedule-change-card">
      <div className="change-header">
        <div className="change-title">
          <span className="action-icon">{getActionIcon(change.action)}</span>
          <h4>{change.title}</h4>
        </div>
        <span className={`action-badge ${change.action.toLowerCase()}`}>
          {getActionLabel(change.action)}
        </span>
      </div>

      <div className="change-body">
        <p className="change-reason">{change.reason}</p>

        {change.new_start && (
          <div className="change-detail">
            <strong>–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ:</strong> {formatDateTime(change.new_start)}
          </div>
        )}

        {change.new_end && (
          <div className="change-detail">
            <strong>–ù–æ–≤—ã–π –∫–æ–Ω–µ—Ü:</strong> {formatDateTime(change.new_end)}
          </div>
        )}

        {change.priority && (
          <div className="change-priority">
            <span className={`priority-badge ${change.priority}`}>
              {change.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' :
               change.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}
            </span>
          </div>
        )}
      </div>
      
      <div className="change-actions">
        <button 
          onClick={onApply}
          className="apply-button"
          disabled={isApplying}
        >
          {isApplying ? '‚è≥ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è...' : '‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
        </button>
        <button 
          onClick={onReject}
          className="reject-button"
          disabled={isApplying}
        >
          ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
        </button>
      </div>
    </div>
  );
};

const Recommendations: React.FC = () => {
  const [analysis, setAnalysis] = useState<CalendarAnalysis | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [events, setEvents] = useState<CalendarEvent[]>([]);
  const [goals, setGoals] = useState<SmartGoal[]>([]);
  const [appliedChanges, setAppliedChanges] = useState<Set<number>>(new Set());
  const [rejectedChanges, setRejectedChanges] = useState<Set<number>>(new Set());
  const [applyingChange, setApplyingChange] = useState<number | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ localStorage –∏–ª–∏ —Å –±—ç–∫–µ–Ω–¥–∞
  const loadEvents = async (): Promise<CalendarEvent[]> => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const cachedEvents = localStorage.getItem('calendar_events');

      if (cachedEvents) {
        console.log('Loading events from localStorage');
        const parsedEvents = JSON.parse(cachedEvents);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ localStorage - –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç Google Calendar
        let eventsArray: CalendarEvent[];
        if (Array.isArray(parsedEvents)) {
          // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          eventsArray = parsedEvents;
        } else if (parsedEvents && typeof parsedEvents === 'object' && parsedEvents.items) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Google Calendar - –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ items
          console.log('Found Google Calendar object in localStorage, extracting items');
          eventsArray = parsedEvents.items;
          // –û–±–Ω–æ–≤–ª—è–µ–º localStorage —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
          localStorage.setItem('calendar_events', JSON.stringify(eventsArray));
        } else {
          // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ—á–∏—â–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
          console.warn('Unexpected format in localStorage, clearing cache');
          localStorage.removeItem('calendar_events');
          eventsArray = [];
        }

        if (eventsArray.length > 0) {
          setEvents(eventsArray);
          return eventsArray;
        }
      }

      // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –±—ç–∫–µ–Ω–¥–∞
      console.log('No events in localStorage, fetching from backend');
      const eventsFromBackend = await calendarService.getEvents(true); // forcefullsync=true

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (—Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π)
      localStorage.setItem('calendar_events', JSON.stringify(eventsFromBackend));
      setEvents(eventsFromBackend);
      return eventsFromBackend;

    } catch (error) {
      console.error('Error loading events:', error);
      throw error;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadGoals = async (): Promise<SmartGoal[]> => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      try {
        const goalsData = await aiService.getGoals();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ goalsData —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (Array.isArray(goalsData)) {
          setGoals(goalsData);
          return goalsData;
        } else {
          console.warn('Goals data is not an array:', goalsData);
          setGoals([]);
          return [];
        }
      } catch (goalsError) {
        console.warn('Failed to load goals, continuing without them:', goalsError);
        setGoals([]);
        return [];
      }
    } catch (error) {
      console.error('Error loading goals:', error);
      return [];
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const getCalendarAnalysis = async (forceRefresh: boolean = false) => {
    setLoading(true);
    setError(null);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏ —Ü–µ–ª–∏
      const [eventsList, goalsList] = await Promise.all([
        loadEvents(),
        loadGoals()
      ]);

      if (!eventsList || eventsList.length === 0) {
        setError('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ò–ò —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const analysisResult = await aiService.analyzeCalendar({
        calendar_events: eventsList,
        user_goals: goalsList,
        analysis_period_days: 7
      }, forceRefresh);

      setAnalysis(analysisResult);

    } catch (err: any) {
      console.error('Error getting calendar analysis:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
  const applyScheduleChange = async (change: ScheduleChange, index: number) => {
    setApplyingChange(index);

    try {
      if (change.action === 'create') {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è - –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
        console.log('Creating event:', change);
      } else if (change.action === 'update' && change.id) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        await aiService.updateCalendarEvent(change.id, {
          summary: change.title,
          description: change.reason,
          start: change.new_start ? { dateTime: change.new_start } : undefined,
          end: change.new_end ? { dateTime: change.new_end } : undefined
        });
      }

      // –ü–æ–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–µ
      setAppliedChanges(prev => {
        const newSet = new Set(prev);
        newSet.add(index);
        return newSet;
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await loadEvents();

    } catch (error: any) {
      console.error('Error applying schedule change:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${error.message}`);
    } finally {
      setApplyingChange(null);
    }
  };

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const rejectScheduleChange = (index: number) => {
    setRejectedChanges(prev => {
      const newSet = new Set(prev);
      newSet.add(index);
      return newSet;
    });
  };

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  const clearCache = () => {
    localStorage.removeItem('calendar_events');
    console.log('Cache cleared');
    alert('–ö–µ—à –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö.');
  };

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ò–ò
  const clearAICache = () => {
    aiService.clearAICache();
    console.log('AI cache cleared');
    alert('–ö–µ—à –ò–ò –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ
  const getCacheInfo = () => {
    const cacheInfo = aiService.getCacheInfo();
    console.log('Cache info:', cacheInfo);

    const sizeInKB = (cacheInfo.totalSize / 1024).toFixed(2);
    const message = `–ö–µ—à –ò–ò —Å–æ–¥–µ—Ä–∂–∏—Ç ${cacheInfo.totalEntries} –∑–∞–ø–∏—Å–µ–π, —Ä–∞–∑–º–µ—Ä: ${sizeInKB} –ö–ë`;
    alert(message);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    getCalendarAnalysis();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  if (loading) {
    return (
      <div className="recommendations-container">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="recommendations-container">
        <div className="error-message">
          <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={() => getCalendarAnalysis()} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="recommendations-container">
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
        <button onClick={() => getCalendarAnalysis()} className="retry-button">
          –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑
        </button>
      </div>
    );
  }

  return (
    <div className="recommendations-container">
      <header className="recommendations-header">
        <h2>üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</h2>
        <div className="header-buttons">
          <button onClick={() => getCalendarAnalysis(false)} className="refresh-button">
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
          </button>
          <button onClick={() => getCalendarAnalysis(true)} className="refresh-button force-refresh">
            ‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          </button>
          <button onClick={clearCache} className="clear-cache-button">
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Å–æ–±—ã—Ç–∏–π
          </button>
          <button onClick={clearAICache} className="clear-cache-button ai-cache">
            üß† –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ò–ò
          </button>
          <button onClick={getCacheInfo} className="info-button">
            ‚ÑπÔ∏è –ò–Ω—Ñ–æ –∫–µ—à–∞
          </button>
        </div>
      </header>

      {/* –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ */}
      <div className="summary-section">
        <h3>üìù –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑</h3>
        <p>{analysis.summary}</p>

        {analysis.productivity_score && (
          <div className="productivity-score">
            <strong>–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong> {analysis.productivity_score}/10
          </div>
        )}

        {analysis.goal_alignment && (
          <div className="goal-alignment">
            <strong>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º:</strong> {analysis.goal_alignment}
          </div>
        )}
      </div>

      {/* –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {analysis.recommendations && analysis.recommendations.length > 0 && (
        <div className="recommendations-section">
          <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
          <div className="recommendations-list">
            {analysis.recommendations.map((recommendation: string, index: number) => (
              <RecommendationCard
                key={index}
                recommendation={recommendation}
              />
            ))}
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
      {analysis.schedule_changes && analysis.schedule_changes.length > 0 && (
        <div className="schedule-changes-section">
          <h3>üìÖ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</h3>
          <div className="schedule-changes-list">
            {analysis.schedule_changes.map((change: ScheduleChange, index: number) => {
              if (appliedChanges.has(index) || rejectedChanges.has(index)) {
                return null;
              }

              return (
                <ScheduleChangeCard
                  key={index}
                  change={change}
                  onApply={() => applyScheduleChange(change, index)}
                  onReject={() => rejectScheduleChange(index)}
                  isApplying={applyingChange === index}
                />
              );
            })}
          </div>

          {appliedChanges.size > 0 && (
            <div className="applied-changes">
              <h4>‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {appliedChanges.size}</h4>
            </div>
          )}

          {rejectedChanges.size > 0 && (
            <div className="rejected-changes">
              <h4>‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {rejectedChanges.size}</h4>
            </div>
          )}
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="events-stats">
        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div className="stats-grid">
          <div className="stat-item">
            <span className="stat-value">{events.length}</span>
            <span className="stat-label">–°–æ–±—ã—Ç–∏–π</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">{goals.length}</span>
            <span className="stat-label">–¶–µ–ª–µ–π</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">{analysis.schedule_changes?.length || 0}</span>
            <span className="stat-label">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Recommendations;
