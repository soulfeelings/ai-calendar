import React, { useState, useEffect } from 'react';
import { aiService, CalendarAnalysis, SmartGoal, ScheduleChange } from '../services/aiService';
import { calendarService, CalendarEvent } from '../services/calendarService';
import { RRuleParser } from '../utils/rruleParser';
import './Recommendations.css';

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
type AnalysisType = 'week' | 'tomorrow' | 'general';

interface AnalysisTypeOption {
  type: AnalysisType;
  title: string;
  description: string;
  icon: string;
  period_days: number;
}

interface RecommendationCardProps {
  recommendation: string;
}

const RecommendationCard: React.FC<RecommendationCardProps> = ({ recommendation }) => {
  return (
    <div className="recommendation-card">
      <div className="recommendation-content">
        <span className="recommendation-text">{recommendation}</span>
      </div>
    </div>
  );
};

interface NoGoalsModalProps {
  isOpen: boolean;
  onClose: () => void;
  onGoToGoals: () => void;
}

const NoGoalsModal: React.FC<NoGoalsModalProps> = ({ isOpen, onClose, onGoToGoals }) => {
  if (!isOpen) return null;

  return (
    <div className="no-goals-modal-overlay" onClick={onClose}>
      <div className="no-goals-modal" onClick={(e) => e.stopPropagation()}>
        <span className="no-goals-modal-icon">üéØ</span>
        <h3>–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
        <p>
          –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å.
          –ò–ò —Å–æ–∑–¥–∞—Å—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.
        </p>
        <div className="no-goals-modal-actions">
          <button className="primary-button" onClick={onGoToGoals}>
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏
          </button>
          <button className="secondary-button" onClick={onClose}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
          </button>
        </div>
      </div>
    </div>
  );
}

interface ScheduleChangeCardProps {
  change: ScheduleChange;
  onApply: () => void;
  onReject: () => void;
  isApplying: boolean;
}

const ScheduleChangeCard: React.FC<ScheduleChangeCardProps> = ({ 
  change, 
  onApply,
  onReject,
  isApplying
}) => {
  const formatDateTime = (dateTimeStr: string) => {
    try {
      return new Date(dateTimeStr).toLocaleString('ru-RU');
    } catch {
      return dateTimeStr;
    }
  };

  const getActionIcon = (action: string) => {
    switch (action.toLowerCase()) {
      case 'move': return 'üìÖ';
      case 'reschedule': return '‚è∞';
      case 'cancel': return '‚ùå';
      case 'optimize': return '‚ö°';
      case 'create': return '‚ûï';
      default: return 'üîÑ';
    }
  };

  const getActionLabel = (action: string) => {
    switch (action.toLowerCase()) {
      case 'move': return '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏';
      case 'reschedule': return '–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
      case 'cancel': return '–û—Ç–º–µ–Ω–∏—Ç—å';
      case 'optimize': return '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
      case 'create': return '–°–æ–∑–¥–∞—Ç—å';
      default: return action;
    }
  };

  return (
    <div className="schedule-change-card">
      <div className="change-header">
        <div className="change-title">
          <span className="action-icon">{getActionIcon(change.action)}</span>
          <h4>{change.title}</h4>
        </div>
        <span className={`action-badge ${change.action.toLowerCase()}`}>
          {getActionLabel(change.action)}
        </span>
      </div>

      <div className="change-body">
        <p className="change-reason">{change.reason}</p>

        {change.new_start && (
          <div className="change-detail">
            <strong>–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ:</strong> {formatDateTime(change.new_start)}
          </div>
        )}

        {change.new_end && (
          <div className="change-detail">
            <strong>–ù–æ–≤—ã–π –∫–æ–Ω–µ—Ü:</strong> {formatDateTime(change.new_end)}
          </div>
        )}

        {change.priority && (
          <div className="change-priority">
            <span className={`priority-badge ${change.priority}`}>
              {change.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' :
               change.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}
            </span>
          </div>
        )}
      </div>
      
      <div className="change-actions">
        <button 
          onClick={onApply}
          className="apply-button"
          disabled={isApplying}
        >
          {isApplying ? '‚è≥ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è...' : '‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
        </button>
        <button 
          onClick={onReject}
          className="reject-button"
          disabled={isApplying}
        >
          ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
        </button>
      </div>
    </div>
  );
};

const Recommendations: React.FC = () => {
  const [analysis, setAnalysis] = useState<CalendarAnalysis | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [events, setEvents] = useState<CalendarEvent[]>([]);
  const [goals, setGoals] = useState<SmartGoal[]>([]);
  const [appliedChanges, setAppliedChanges] = useState<Set<string>>(new Set());
  const [rejectedChanges, setRejectedChanges] = useState<Set<string>>(new Set());
  const [applyingChange, setApplyingChange] = useState<number | null>(null);

  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
  const [selectedAnalysisType, setSelectedAnalysisType] = useState<AnalysisType | null>(null);
  const [showAnalysisSelection, setShowAnalysisSelection] = useState(true);
  const [showNoGoalsModal, setShowNoGoalsModal] = useState(false);

  // –ö–ª—é—á–∏ –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  const APPLIED_KEY = 'ai_applied_schedule_change_ids';
  const REJECTED_KEY = 'ai_rejected_schedule_change_ids';

  // –û–ø—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  const analysisOptions: AnalysisTypeOption[] = [
    {
      type: 'week',
      title: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –Ω–µ–¥–µ–ª—é',
      description: '–ò–ò —Å–æ—Å—Ç–∞–≤–∏—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞',
      icon: 'üìÖ',
      period_days: 7
    },
    {
      type: 'tomorrow',
      title: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
      description: '–ò–ò —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π',
      icon: 'üåÖ',
      period_days: 1
    },
    {
      type: 'general',
      title: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑',
      description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É',
      icon: 'üîç',
      period_days: 30
    }
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è showNoGoalsModal
  useEffect(() => {
    // —É–±—Ä–∞–Ω–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  }, [showNoGoalsModal]);

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è loading
  useEffect(() => {
    // —É–±—Ä–∞–Ω–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  }, [loading]);

  // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  // —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  // const testModal = () => {
  //   setShowNoGoalsModal(true);
  // };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑–º–µ–Ω–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º id, –∏–Ω–∞—á–µ —Ö–µ—à –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  const getChangeKey = (change: ScheduleChange): string => {
    if (change.id) return change.id;
    const payload = `${change.action}|${change.title}|${change.reason}|${change.new_start || ''}|${change.new_end || ''}|${change.priority || ''}`;
    let hash = 0;
    for (let i = 0; i < payload.length; i++) {
      const chr = payload.charCodeAt(i);
      hash = ((hash << 5) - hash) + chr;
      hash |= 0;
    }
    return `gen_${Math.abs(hash).toString(36)}`;
  };

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û: –ø–æ–∏—Å–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const findEventForChange = (change: ScheduleChange): CalendarEvent | undefined => {
    if (!events || events.length === 0) return undefined;
    // –ü–æ id
    if (change.id) {
      const byId = events.find(e => e.id === change.id);
      if (byId) return byId;
    }
    // –ü–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    if (change.title) {
      const titleLower = change.title.toLowerCase();
      const byTitle = events.find(e => (e.summary || '').toLowerCase() === titleLower);
      if (byTitle) return byTitle;
    }
    return undefined;
  };

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ –¥–∞—Ç—ã
  const isTimeOnly = (value?: string): boolean => {
    if (!value) return false;
    const hasDate = /^\d{4}-\d{2}-\d{2}/.test(value) || value.includes('T');
    if (hasDate) return false;
    // HH:mm[:ss][ AM/PM]
    return /^(\d{1,2}):(\d{2})(?::(\d{2}))?(\s*(AM|PM))?$/i.test(value.trim());
  };

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û: –∑–∞–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ RFC3339, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞—Ç—É –∏ —Å–º–µ—â–µ–Ω–∏–µ
  const replaceTimeInRFC3339 = (baseDateTime: string, timeStr: string, fallbackOffset?: string): string => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ —Å–º–µ—â–µ–Ω–∏–µ –∏–∑ baseDateTime, –µ—Å–ª–∏ –µ—Å—Ç—å
    const m = baseDateTime.match(/^(\d{4}-\d{2}-\d{2})T\d{2}:\d{2}:?\d{0,2}(?:\.\d+)?(Z|[+-]\d{2}:\d{2})?$/);
    const datePart = baseDateTime.slice(0, 10); // YYYY-MM-DD
    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    const t = timeStr.trim();
    const timeMatch = t.match(/^(\d{1,2}):(\d{2})(?::(\d{2}))?(\s*(AM|PM))?$/i);
    if (!timeMatch) return baseDateTime; // –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    let hh = parseInt(timeMatch[1], 10);
    const mm = parseInt(timeMatch[2] || '0', 10);
    const ss = parseInt(timeMatch[3] || '0', 10);
    const ampm = (timeMatch[5] || '').toUpperCase();
    if (ampm === 'AM' && hh === 12) hh = 0;
    if (ampm === 'PM' && hh < 12) hh += 12;

    const offsetPart = (m && m[2]) ? m[2] : (fallbackOffset || 'Z');
    const hhStr = String(hh).padStart(2, '0');
    const mmStr = String(mm).padStart(2, '0');
    const ssStr = String(ss).padStart(2, '0');
    return `${datePart}T${hhStr}:${mmStr}:${ssStr}${offsetPart || ''}`;
  };

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º new_start/new_end –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
  const normalizeChangeDateTimes = (change: ScheduleChange): ScheduleChange => {
    const event = findEventForChange(change);
    if (!event) return change;

    const baseStart = event.start?.dateTime || (event.start?.date ? `${event.start.date}T00:00:00Z` : undefined);
    const baseEnd = event.end?.dateTime || (event.end?.date ? `${event.end.date}T23:59:59Z` : undefined);

    const getOffset = (dt?: string) => {
      if (!dt) return undefined;
      const m = dt.match(/(Z|[+-]\d{2}:\d{2})$/);
      return m ? m[1] : undefined;
    };

    const startOffset = getOffset(baseStart);
    const endOffset = getOffset(baseEnd);

    const normalized: ScheduleChange = { ...change };
    if (change.new_start && isTimeOnly(change.new_start) && baseStart) {
      normalized.new_start = replaceTimeInRFC3339(baseStart, change.new_start, startOffset);
    }
    if (change.new_end && isTimeOnly(change.new_end) && baseEnd) {
      normalized.new_end = replaceTimeInRFC3339(baseEnd, change.new_end, endOffset);
    }
    return normalized;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const loadHandledChanges = () => {
    try {
      const appliedRaw = localStorage.getItem(APPLIED_KEY);
      const rejectedRaw = localStorage.getItem(REJECTED_KEY);
      setAppliedChanges(new Set(appliedRaw ? JSON.parse(appliedRaw) : []));
      setRejectedChanges(new Set(rejectedRaw ? JSON.parse(rejectedRaw) : []));
    } catch (e) {
      console.warn('Failed to load handled changes from localStorage', e);
      setAppliedChanges(new Set());
      setRejectedChanges(new Set());
    }
  };

  const persistHandledChanges = (applied: Set<string>, rejected: Set<string>) => {
    try {
      localStorage.setItem(APPLIED_KEY, JSON.stringify([...applied]));
      localStorage.setItem(REJECTED_KEY, JSON.stringify([...rejected]));
    } catch (e) {
      console.warn('Failed to persist handled changes to localStorage', e);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ localStorage –∏–ª–∏ —Å –±—ç–∫–µ–Ω–¥–∞
  const loadEvents = async (): Promise<CalendarEvent[]> => {
    try {
      const cachedEvents = localStorage.getItem('calendar_events');

      if (cachedEvents) {
        const parsedEvents = JSON.parse(cachedEvents);
        let eventsArray: CalendarEvent[];
        if (Array.isArray(parsedEvents)) {
          eventsArray = parsedEvents;
        } else if (parsedEvents && typeof parsedEvents === 'object' && parsedEvents.items) {
          eventsArray = parsedEvents.items;
          localStorage.setItem('calendar_events', JSON.stringify(eventsArray));
        } else {
          localStorage.removeItem('calendar_events');
          eventsArray = [];
        }

        if (eventsArray.length > 0) {
          setEvents(eventsArray);
          return eventsArray;
        }
      }

      const eventsFromBackend = await calendarService.getEvents(true);
      localStorage.setItem('calendar_events', JSON.stringify(eventsFromBackend));
      setEvents(eventsFromBackend);
      return eventsFromBackend;

    } catch (error) {
      console.error('Error loading events:', error);
      throw error;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadGoals = async (): Promise<SmartGoal[]> => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      try {
        const goalsData = await aiService.getGoals(true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ goalsData —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (Array.isArray(goalsData)) {
          setGoals(goalsData);
          return goalsData;
        } else {
          console.warn('Goals data is not an array:', goalsData);
          setGoals([]);
          return [];
        }
      } catch (goalsError) {
        console.warn('Failed to load goals, continuing without them:', goalsError);
        setGoals([]);
        return [];
      }
    } catch (error) {
      console.error('Error loading goals:', error);
      return [];
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ
  const isEventActiveOrRecurring = (event: CalendarEvent): boolean => {
    if (!event || event.status === 'cancelled') return false;

    const now = new Date();

    // –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è (master) ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –ø–æ RRULE:UNTIL
    if (event.recurrence && event.recurrence.length > 0) {
      try {
        const rule = RRuleParser.parseRRule(event.recurrence[0]);
        if (rule.until && rule.until < now) return false; // —Å–µ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        return true; // —Å–µ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      } catch {
        return true; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
      }
    }

    // –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const endISO = event.end?.dateTime || (event.end?.date ? `${event.end.date}T23:59:59` : undefined);
    if (!endISO) return false;

    const end = new Date(endISO);
    return end >= now;
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –ø–µ—Ä–∏–æ–¥—É –∞–Ω–∞–ª–∏–∑–∞
  const filterEventsByPeriod = (events: CalendarEvent[], analysisType: AnalysisType): CalendarEvent[] => {
    const now = new Date();
    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());

    switch (analysisType) {
      case 'tomorrow':
        const tomorrow = new Date(startOfToday);
        tomorrow.setDate(tomorrow.getDate() + 1);
        const tomorrowStart = new Date(tomorrow);
        tomorrowStart.setHours(0, 0, 0, 0);
        const tomorrowEnd = new Date(tomorrow);
        tomorrowEnd.setHours(23, 59, 59, 999);

        const tomorrowEvents = events.filter(event => {
          if (!isEventActiveOrRecurring(event)) return false;

          const eventStartStr = event.start?.dateTime || event.start?.date;
          const eventEndStr = event.end?.dateTime || event.end?.date;
          if (!eventStartStr) return false;

          const eventStart = new Date(eventStartStr);
          const eventEnd = new Date(eventEndStr || eventStartStr);

          const isInRange = (eventStart >= tomorrowStart && eventStart <= tomorrowEnd) ||
                           (eventEnd >= tomorrowStart && eventEnd <= tomorrowEnd) ||
                           (eventStart <= tomorrowStart && eventEnd >= tomorrowEnd);
          return isInRange;
        });
        return tomorrowEvents;

      case 'week':
        const weekEnd = new Date(startOfToday);
        weekEnd.setDate(weekEnd.getDate() + 7);
        weekEnd.setHours(23, 59, 59, 999);

        return events.filter(event => {
          if (!isEventActiveOrRecurring(event)) return false;

          const eventStartStr = event.start?.dateTime || event.start?.date;
          const eventEndStr = event.end?.dateTime || event.end?.date;
          if (!eventStartStr) return false;

          const eventStart = new Date(eventStartStr);
          const eventEnd = new Date(eventEndStr || eventStartStr);

          return (eventStart >= startOfToday && eventStart <= weekEnd) ||
                 (eventEnd >= startOfToday && eventEnd <= weekEnd) ||
                 (eventStart <= startOfToday && eventEnd >= weekEnd);
        });

      case 'general':
      default:
        return events.filter(isEventActiveOrRecurring);
    }
  };

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const getCalendarAnalysis = async (analysisType: AnalysisType, forceRefresh: boolean = false) => {
    setLoading(true);
    setError(null);
    setShowNoGoalsModal(false);

    try {
      const [eventsList, goalsList] = await Promise.all([
        loadEvents(),
        loadGoals()
      ]);

      if (analysisType === 'tomorrow' || analysisType === 'week') {
        const hasGoals = goalsList && Array.isArray(goalsList) && goalsList.length > 0;
        if (!hasGoals) {
          setLoading(false);
          setShowNoGoalsModal(true);
          return;
        }
        await createFullSchedule(analysisType, eventsList || [], goalsList);
        return;
      }

      if (!eventsList || eventsList.length === 0) {
        setError('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
      }

      const filteredEvents = filterEventsByPeriod(eventsList, analysisType);

      if (filteredEvents.length === 0) {
        setError('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ');
        return;
      }

      const option = analysisOptions.find(opt => opt.type === analysisType);
      const periodDays = option?.period_days || 30;

      const analysisResult = await aiService.analyzeCalendar({
        calendar_events: filteredEvents,
        user_goals: goalsList,
        analysis_period_days: periodDays,
        analysis_type: analysisType
      }, forceRefresh);

      const normalizedChanges = (analysisResult.schedule_changes || []).map(ch => normalizeChangeDateTimes(ch));
      setAnalysis({ ...analysisResult, schedule_changes: normalizedChanges });
      setShowAnalysisSelection(false);

    } catch (err: any) {
      console.error('‚ùå Error getting calendar analysis:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    } finally {
      setLoading(false);
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const createFullSchedule = async (scheduleType: 'tomorrow' | 'week', eventsList: CalendarEvent[], goalsList: SmartGoal[]) => {
    try {
      const filteredEvents = filterEventsByPeriod(eventsList, scheduleType);

      const scheduleRequest = {
        schedule_type: scheduleType,
        user_goals: goalsList,
        existing_events: filteredEvents,
        work_hours_start: "09:00",
        work_hours_end: "18:00",
        break_duration_minutes: 60,
        buffer_between_events_minutes: 15
      };

      const fullScheduleResult = await aiService.createFullSchedule(scheduleRequest);

      const scheduleChanges: ScheduleChange[] = [];
      const recommendations: string[] = [...fullScheduleResult.recommendations];

      fullScheduleResult.schedules.forEach((daySchedule, dayIndex) => {
        recommendations.push(`üìÖ ${daySchedule.day_name} (${daySchedule.date}): ${daySchedule.events.length} —Å–æ–±—ã—Ç–∏–π, ${daySchedule.total_productive_hours || 0}—á –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`);
        daySchedule.events.forEach((event, eventIndex) => {
          scheduleChanges.push({
            id: `schedule_${dayIndex}_${eventIndex}`,
            action: 'create',
            title: event.title,
            reason: event.description || `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ü–µ–ª–∏. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${event.category || 'general'}`,
            new_start: event.start_time,
            new_end: event.end_time,
            priority: event.priority || 'medium'
          });
        });
      });

      if (fullScheduleResult.reasoning) {
        recommendations.push(`ü§ñ –ò–ò: ${fullScheduleResult.reasoning}`);
      }

      const analysisResult: CalendarAnalysis = {
        summary: `–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${scheduleType === 'tomorrow' ? '–∑–∞–≤—Ç—Ä–∞' : '–Ω–µ–¥–µ–ª—é'}. –£—á—Ç–µ–Ω–æ —Ü–µ–ª–µ–π: ${fullScheduleResult.total_goals_addressed}. –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${fullScheduleResult.productivity_score || 0}/10`,
        schedule_changes: scheduleChanges,
        recommendations: recommendations,
        productivity_score: fullScheduleResult.productivity_score,
        goal_alignment: `–£—á—Ç–µ–Ω–æ ${fullScheduleResult.total_goals_addressed} –∏–∑ ${goalsList.length} —Ü–µ–ª–µ–π`
      };

      setAnalysis(analysisResult);
      setShowAnalysisSelection(false);

    } catch (error: any) {
      console.error('‚ùå Error creating full schedule:', error);
      throw error;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
  const handleAnalysisTypeSelect = (analysisType: AnalysisType) => {
    setSelectedAnalysisType(analysisType);
    getCalendarAnalysis(analysisType);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
  const goBackToSelection = () => {
    setShowAnalysisSelection(true);
    setSelectedAnalysisType(null);
    setAnalysis(null);
    setError(null);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const refreshCalendarAnalysis = async () => {
    if (selectedAnalysisType) {
      aiService.clearAICache();
      await getCalendarAnalysis(selectedAnalysisType, true);
    }
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
  const applyScheduleChange = async (change: ScheduleChange, index: number) => {
    setApplyingChange(index);

    const key = getChangeKey(change);

    try {
      const normalized = normalizeChangeDateTimes(change);
      const action = normalized.action?.toLowerCase();

      if ((action === 'update' || action === 'reschedule' || action === 'move' || action === 'optimize') && normalized.id) {
        const patchBody: any = {};
        if (normalized.new_start) patchBody.start = { dateTime: normalized.new_start };
        if (normalized.new_end) patchBody.end = { dateTime: normalized.new_end };
        await aiService.updateCalendarEvent(normalized.id, patchBody);
      } else if (action === 'cancel') {
        if (!normalized.id) {
          throw new Error('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–æ–±—ã—Ç–∏—è');
        }
        await calendarService.deleteEvent(normalized.id);
      } else if (action === 'create') {
        if (!normalized.new_start || !normalized.new_end) {
          throw new Error('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω—É–∂–Ω—ã new_start –∏ new_end');
        }
        const eventPayload = {
          summary: normalized.title || '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
            description: normalized.reason || '–°–æ–∑–¥–∞–Ω–æ –ò–ò',
            start: { dateTime: normalized.new_start },
            end: { dateTime: normalized.new_end },
            reminders: { useDefault: true }
        };
        await calendarService.createEvent(eventPayload);
      }

      setAppliedChanges(prev => {
        const next = new Set(prev);
        next.add(key);
        persistHandledChanges(next, rejectedChanges);
        return next;
      });

      const freshEvents = await calendarService.forceRefreshEvents();
      setEvents(freshEvents);
      localStorage.setItem('calendar_events', JSON.stringify(freshEvents));

    } catch (error: any) {
      console.error('Error applying schedule change:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${error.message || error}`);
    } finally {
      setApplyingChange(null);
    }
  };

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const rejectScheduleChange = (change: ScheduleChange) => {
    const key = getChangeKey(change);
    setRejectedChanges(prev => {
      const next = new Set(prev);
      next.add(key);
      persistHandledChanges(appliedChanges, next);
      return next;
    });
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadHandledChanges();
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
  if (showAnalysisSelection && !loading) {
    return (
      <div className="recommendations-container">
        <div className="analysis-selection">
          <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</h2>
          <p className="selection-subtitle">
            –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ —Ü–µ–ª–∏, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
          </p>

          <div className="analysis-options">
            {analysisOptions.map((option) => (
              <div
                key={option.type}
                className="analysis-option"
                onClick={() => handleAnalysisTypeSelect(option.type)}
              >
                <div className="option-icon">{option.icon}</div>
                <div className="option-content">
                  <h3>{option.title}</h3>
                  <p>{option.description}</p>
                </div>
                <div className="option-arrow">‚Üí</div>
              </div>
            ))}
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ */}
        <NoGoalsModal
          isOpen={showNoGoalsModal}
          onClose={() => setShowNoGoalsModal(false)}
          onGoToGoals={() => {
            setShowNoGoalsModal(false);
            window.location.href = '/goals';
          }}
        />
      </div>
    );
  }

  if (loading) {
    const selectedOption = analysisOptions.find(opt => opt.type === selectedAnalysisType);
    return (
      <div className="recommendations-container">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å...</p>
          {selectedOption && (
            <p className="analysis-type-hint">
              {selectedOption.icon} {selectedOption.title}
            </p>
          )}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="recommendations-container">
        <div className="error-message">
          <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <div className="error-actions">
            <button onClick={() => selectedAnalysisType && getCalendarAnalysis(selectedAnalysisType)} className="retry-button">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            <button onClick={goBackToSelection} className="back-button">
              –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="recommendations-container">
        <div className="no-analysis">
          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
          <button onClick={goBackToSelection} className="back-button">
            –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
          </button>
        </div>
      </div>
    );
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è: —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ, —á—Ç–æ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
  const visibleChanges = (analysis.schedule_changes || []).filter(change => {
    const key = getChangeKey(change);
    return !appliedChanges.has(key) && !rejectedChanges.has(key);
  });

  const selectedOption = analysisOptions.find(opt => opt.type === selectedAnalysisType);

  return (
    <div className="recommendations-container">
      <div className="recommendations-header">
        <div className="header-top">
          <button onClick={goBackToSelection} className="back-to-selection">
            ‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑
          </button>
          <button onClick={refreshCalendarAnalysis} className="refresh-button">
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
          </button>
        </div>

        {selectedOption && (
          <div className="current-analysis-type">
            <span className="analysis-icon">{selectedOption.icon}</span>
            <h2>{selectedOption.title}</h2>
          </div>
        )}
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {analysis.recommendations && analysis.recommendations.length > 0 && (
        <div className="recommendations-section">
          <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
          <div className="recommendations-list">
            {analysis.recommendations.map((recommendation, index) => (
              <RecommendationCard key={index} recommendation={recommendation} />
            ))}
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
      {visibleChanges.length > 0 && (
        <div className="schedule-changes-section">
          <h3>üîÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</h3>
          <div className="schedule-changes-list">
            {visibleChanges.map((change, index) => (
              <ScheduleChangeCard
                key={getChangeKey(change)}
                change={change}
                onApply={() => applyScheduleChange(change, index)}
                onReject={() => rejectScheduleChange(change)}
                isApplying={applyingChange === index}
              />
            ))}
          </div>
        </div>
      )}

      {/* –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ */}
      {analysis.summary && (
        <div className="analysis-summary">
          <h3>üìä –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
          <p>{analysis.summary}</p>

          {analysis.productivity_score !== undefined && (
            <div className="productivity-score">
              <strong>–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong> {analysis.productivity_score}/10
            </div>
          )}

          {analysis.goal_alignment && (
            <div className="goal-alignment">
              <strong>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º:</strong> {analysis.goal_alignment}
            </div>
          )}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ù–µ—Ç —Ü–µ–ª–µ–π" */}
      <NoGoalsModal
        isOpen={showNoGoalsModal}
        onClose={() => setShowNoGoalsModal(false)}
        onGoToGoals={() => {
          setShowNoGoalsModal(false);
          window.location.href = '/goals';
        }}
      />
    </div>
  );
};

export default Recommendations;
