import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { aiService, SmartGoal } from '../services/aiService';
import api from '../services/api';
import './Goals.css';

const priorityOptions = [
  { value: 'high', label: '–í—ã—Å–æ–∫–∏–π' },
  { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π' },
  { value: 'low', label: '–ù–∏–∑–∫–∏–π' },
];

const GoalsSimple: React.FC = () => {
  const navigate = useNavigate();

  const [form, setForm] = useState<SmartGoal>({
    title: '',
    description: '',
    deadline: '',
    priority: 'medium',
  });

  const [goals, setGoals] = useState<SmartGoal[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  const [creatingEvents, setCreatingEvents] = useState<{[goalId: string]: boolean}>({});
  const [createdEvents, setCreatedEvents] = useState<{[goalId: string]: string}>({});

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedEvents = localStorage.getItem('goalCalendarEvents');
    if (savedEvents) {
      try {
        setCreatedEvents(JSON.parse(savedEvents));
      } catch (e) {
        console.error('Error parsing saved events:', e);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ localStorage
  const saveCreatedEvent = (goalId: string, eventId: string) => {
    const updatedEvents = { ...createdEvents, [goalId]: eventId };
    setCreatedEvents(updatedEvents);
    localStorage.setItem('goalCalendarEvents', JSON.stringify(updatedEvents));
  };

  // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
  const removeCreatedEvent = (goalId: string) => {
    const updatedEvents = { ...createdEvents };
    delete updatedEvents[goalId];
    setCreatedEvents(updatedEvents);
    localStorage.setItem('goalCalendarEvents', JSON.stringify(updatedEvents));
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const loadGoals = async () => {
    setLoading(true);
    setError(null);

    try {
      const goalsData = await aiService.getGoals();
      setGoals(goalsData);
    } catch (e: any) {
      setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–ª–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleFieldChange = (key: keyof SmartGoal, value: string) => {
    setForm((prev) => ({ ...prev, [key]: value }));
  };

  const handleSaveGoal = async () => {
    if (!form.title.trim()) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    if (!form.description.trim()) {
      setError('–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    setSaving(true);
    setError(null);

    try {
      // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å —á–µ—Ä–µ–∑ API (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º SMART –∞–Ω–∞–ª–∏–∑–æ–º)
      const response = await api.post('/ai/goals', {
        title: form.title,
        description: form.description,
        deadline: form.deadline || undefined,
        priority: form.priority,
      });

      setSuccess(`–¶–µ–ª—å "${form.title}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò–ò –ø—Ä–æ–≤–µ–ª SMART –∞–Ω–∞–ª–∏–∑.`);

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setForm({
        title: '',
        description: '',
        deadline: '',
        priority: 'medium',
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
      await loadGoals();

    } catch (e: any) {
      console.error('Error saving goal:', e);
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å');
    } finally {
      setSaving(false);
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
    }
  };

  const deleteGoal = async (goalId: string) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å?')) {
      return;
    }

    try {
      await api.delete(`/ai/goals/${goalId}`);
      setSuccess('–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ localStorage
      if (createdEvents[goalId]) {
        removeCreatedEvent(goalId);
      }

      await loadGoals();
    } catch (e: any) {
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å');
    }
  };

  const createEventForGoal = async (goal: SmartGoal) => {
    if (!goal.id) return;

    setCreatingEvents(prev => ({ ...prev, [goal.id!]: true }));
    setError(null);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
      let startTime, endTime;

      if (goal.deadline) {
        const deadline = new Date(goal.deadline);
        startTime = deadline.toISOString();
        endTime = new Date(deadline.getTime() + 60 * 60 * 1000).toISOString(); // +1 —á–∞—Å
      } else {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(9, 0, 0, 0); // 9 —É—Ç—Ä–∞ –∑–∞–≤—Ç—Ä–∞
        startTime = tomorrow.toISOString();
        endTime = new Date(tomorrow.getTime() + 60 * 60 * 1000).toISOString(); // +1 —á–∞—Å
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏
      const eventData = {
        summary: `–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é: ${goal.title}`,
        description: `üéØ –¶–µ–ª—å: ${goal.description}

${goal.smart_analysis ? `
üìä SMART –ê–Ω–∞–ª–∏–∑ (–ò–ò):
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: ${goal.smart_analysis.overall_score || 'N/A'}/100
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SMART: ${goal.smart_analysis.is_smart ? '–î–∞' : '–ù–µ—Ç'}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:
${goal.smart_analysis.suggestions?.map((s: string) => `‚Ä¢ ${s}`).join('\n') || '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'}
` : ''}

üîî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityOptions.find(p => p.value === goal.priority)?.label || '–°—Ä–µ–¥–Ω–∏–π'}`,
        start: {
          dateTime: startTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        end: {
          dateTime: endTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        location: "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é",
        reminders: {
          useDefault: true
        }
      };

      const response = await api.post('/calendar/events', eventData);
      setSuccess(`–°–æ–±—ã—Ç–∏–µ "${goal.title}" —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ`);
      saveCreatedEvent(goal.id, response.data.id);

    } catch (e: any) {
      console.error('Error creating calendar event:', e);
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
    } finally {
      setCreatingEvents(prev => ({ ...prev, [goal.id!]: false }));
      setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
    }
  };

  const deleteEventForGoal = async (goal: SmartGoal) => {
    if (!goal.id || !createdEvents[goal.id]) return;

    const eventId = createdEvents[goal.id];
    setCreatingEvents(prev => ({ ...prev, [goal.id!]: true }));
    setError(null);

    try {
      await api.delete(`/calendar/events/${eventId}`);
      removeCreatedEvent(goal.id);
      setSuccess(`–°–æ–±—ã—Ç–∏–µ "${goal.title}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è`);
    } catch (e: any) {
      console.error('Error deleting calendar event:', e);
      setError(e?.response?.data?.detail || e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    } finally {
      setCreatingEvents(prev => ({ ...prev, [goal.id!]: false }));
      setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
    }
  };

  const canSave = form.title.trim().length > 0 && form.description.trim().length > 0;

  return (
    <div className="goals-container">
      <div className="goals-header">
        <h1>–ú–æ–∏ —Ü–µ–ª–∏</h1>
        <button onClick={() => navigate('/recommendations')} className="nav-button">
          –ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        </button>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
      {error && (
        <div className="message error-message">
          ‚ùå {error}
        </div>
      )}

      {success && (
        <div className="message success-message">
          ‚úÖ {success}
        </div>
      )}

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏ */}
      <div className="goal-form">
        <h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å</h2>

        <div className="form-group">
          <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ *</label>
          <input
            id="title"
            type="text"
            value={form.title}
            onChange={(e) => handleFieldChange('title', e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–∑—É—á–∏—Ç—å TypeScript"
            maxLength={200}
          />
        </div>

        <div className="form-group">
          <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ *</label>
          <textarea
            id="description"
            value={form.description}
            onChange={(e) => handleFieldChange('description', e.target.value)}
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å..."
            rows={4}
            maxLength={1000}
          />
        </div>

        <div className="form-group">
          <label htmlFor="deadline">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
          <input
            id="deadline"
            type="datetime-local"
            value={form.deadline}
            onChange={(e) => handleFieldChange('deadline', e.target.value)}
          />
        </div>

        <div className="form-group">
          <label htmlFor="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
          <select
            id="priority"
            value={form.priority}
            onChange={(e) => handleFieldChange('priority', e.target.value)}
          >
            {priorityOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <button
          onClick={handleSaveGoal}
          disabled={!canSave || saving}
          className="save-button"
        >
          {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å (—Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º)'}
        </button>

        <p className="form-note">
          * –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏ –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ–¥–µ—Ç SMART –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        </p>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–ª–µ–π */}
      <div className="goals-list">
        <h2>–ú–æ–∏ —Ü–µ–ª–∏ ({goals.length})</h2>

        {loading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π...</div>}

        {!loading && goals.length === 0 && (
          <div className="empty-state">
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –≤—ã—à–µ!</p>
          </div>
        )}

        {goals.map((goal) => (
          <div key={goal.id} className="goal-card">
            <div className="goal-header">
              <h3>{goal.title}</h3>
              <div className="goal-priority">
                <span className={`priority-badge priority-${goal.priority}`}>
                  {priorityOptions.find(p => p.value === goal.priority)?.label || '–°—Ä–µ–¥–Ω–∏–π'}
                </span>
              </div>
            </div>

            <div className="goal-content">
              <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {goal.description}</p>

              {goal.deadline && (
                <p><strong>–î–µ–¥–ª–∞–π–Ω:</strong> {new Date(goal.deadline).toLocaleString('ru-RU')}</p>
              )}

              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç SMART –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò */}
              {goal.smart_analysis && (
                <div className="smart-analysis">
                  <h4>ü§ñ SMART –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò:</h4>
                  <div className="analysis-score">
                    <span>–û–±—â–∏–π –±–∞–ª–ª: <strong>{goal.smart_analysis.overall_score || 'N/A'}/100</strong></span>
                    <span className={goal.smart_analysis.is_smart ? 'smart-yes' : 'smart-no'}>
                      {goal.smart_analysis.is_smart ? '‚úÖ SMART' : '‚ùå –ù–µ SMART'}
                    </span>
                  </div>

                  {goal.smart_analysis.suggestions && goal.smart_analysis.suggestions.length > 0 && (
                    <div className="suggestions">
                      <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                      <ul>
                        {goal.smart_analysis.suggestions.map((suggestion: string, index: number) => (
                          <li key={index}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )}
            </div>

            <div className="goal-actions">
              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ */}
              {goal.id && createdEvents[goal.id] ? (
                <button
                  onClick={() => deleteEventForGoal(goal)}
                  disabled={creatingEvents[goal.id!]}
                  className="calendar-button delete"
                >
                  {creatingEvents[goal.id!] ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : 'üìÖ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è'}
                </button>
              ) : (
                <button
                  onClick={() => createEventForGoal(goal)}
                  disabled={creatingEvents[goal.id!]}
                  className="calendar-button create"
                >
                  {creatingEvents[goal.id!] ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : 'üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å'}
                </button>
              )}

              <button
                onClick={() => deleteGoal(goal.id!)}
                className="delete-button"
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default GoalsSimple;
