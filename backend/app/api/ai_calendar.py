from fastapi import APIRouter, HTTPException, Depends, status
from typing import Annotated
import logging

from schemas.event_schemas import CalendarAnalysisRequest
from schemas.openai_schemas import (
    SchedulePlanningRequest,
    GoalAnalysisResponse,
    FullScheduleRequest,
    FullScheduleResponse
)
from service import OpenAIService
from dependencies import get_user_request_id, get_openai_service, get_goals_repo
from repository.goals_repo import GoalsRepository

router = APIRouter(prefix="/ai", tags=["AI Calendar Analysis"])
logger = logging.getLogger(__name__)


@router.post("/analyze-calendar", response_model=dict)
async def analyze_calendar_and_goals(
    request: CalendarAnalysisRequest,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    user_id: str = Depends(get_user_request_id),
):
    """
    –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ SMART —Ü–µ–ª–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ FastAPI)

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
    - 'week': –∞–Ω–∞–ª–∏–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é
    - 'tomorrow': –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    - 'general': –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    try:
        analysis_type: str = request.analysis_type if request.analysis_type else 'general'
        logger.info(f"Starting calendar analysis for user {user_id}, type: {analysis_type}")
        logger.info(f"Received {len(request.calendar_events)} events for analysis")

        # –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìã Analysis request details:")
        logger.info(f"  - analysis_type: {analysis_type}")
        logger.info(f"  - analysis_period_days: {request.analysis_period_days}")
        logger.info(f"  - user_goals count: {len(request.user_goals) if request.user_goals else 0}")
        logger.info(f"  - calendar_events count: {len(request.calendar_events)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if request.calendar_events and len(request.calendar_events) > 0:
            logger.info(f"üìÖ Sample calendar events received:")
            for i, event in enumerate(request.calendar_events[:3]):  # –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è
                logger.info(f"  Event {i+1}: {event.id} - {event.summary} ({event.start} to {event.end})")
        else:
            logger.warning(f"‚ö†Ô∏è No calendar events received in request!")
            logger.info(f"üì§ Raw request data: calendar_events field = {request.calendar_events}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ —Å–ª–æ–≤–∞—Ä–∏
        calendar_events_dict = [event.model_dump() for event in request.calendar_events]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        result = await openai_service.analyze_calendar_and_goals(
            calendar_events=calendar_events_dict,
            user_goals=request.user_goals,
            analysis_period_days=request.analysis_period_days or 7,
            analysis_type=str(analysis_type)
        )

        logger.info(f"Calendar analysis completed successfully for user {user_id}, type: {analysis_type}")
        return result

    except Exception as e:
        logger.error(f"Error in calendar analysis: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}"
        )


@router.post("/plan-goal", response_model=dict)
async def plan_goal_schedule(
    request: SchedulePlanningRequest,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π SMART —Ü–µ–ª–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    """
    try:
        logger.info(f"Starting goal planning for user {user_id}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
        free_slots_dict = [slot.model_dump() for slot in request.free_time_slots]
        goal_dict = request.goal.model_dump()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        result = await openai_service.generate_schedule_suggestion(
            free_time_slots=free_slots_dict,
            goal=goal_dict,
            context=request.context or ""
        )

        logger.info(f"Goal planning completed successfully for user {user_id}")
        return result

    except Exception as e:
        logger.error(f"Error in goal planning: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–ª–∏: {str(e)}"
        )


@router.post("/goals", response_model=dict)
async def create_goal(
    goal_data: dict,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    goals_repo: Annotated[GoalsRepository, Depends(get_goals_repo)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ —Å SMART –∞–Ω–∞–ª–∏–∑–æ–º
    """
    try:
        # –ü—Ä–æ–≤–æ–¥–∏–º SMART –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏
        smart_analysis = await openai_service.analyze_goal_smart(
            title=goal_data.get("title", ""),
            description=goal_data.get("description", ""),
            deadline=goal_data.get("deadline")
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫ –¥–∞–Ω–Ω—ã–º —Ü–µ–ª–∏
        goal_data["smart_analysis"] = smart_analysis

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤ –ë–î
        goal_id = await goals_repo.create_goal(user_id, goal_data)

        return {
            "id": goal_id,
            "message": "–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "smart_analysis": smart_analysis,
            **goal_data
        }
    except Exception as e:
        logger.error(f"Error creating goal: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏: {str(e)}"
        )


@router.get("/goals")
async def get_goals(
    goals_repo: Annotated[GoalsRepository, Depends(get_goals_repo)],
    include_completed: bool = False,
    user_id: str = Depends(get_user_request_id),
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        goals = await goals_repo.get_user_goals(user_id, include_completed)
        return goals
    except Exception as e:
        logger.error(f"Error getting goals: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π: {str(e)}"
        )


@router.post("/analyze-goal", response_model=GoalAnalysisResponse)
async def analyze_goal(
    goal_data: dict,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º SMART
    """
    try:
        analysis = await openai_service.analyze_goal_smart(
            title=goal_data.get("title", ""),
            description=goal_data.get("description", ""),
            deadline=goal_data.get("deadline")
        )

        return GoalAnalysisResponse(**analysis)
    except Exception as e:
        logger.error(f"Error analyzing goal: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–ª–∏: {str(e)}"
        )


@router.post("/apply-schedule-change")
async def apply_schedule_change(
    change: dict,
    user_id: str = Depends(get_user_request_id)
):
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    """
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {"success": True, "message": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"}
    except Exception as e:
        logger.error(f"Error applying schedule change: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {str(e)}"
        )


@router.post("/chat")
async def chat_with_ai(
    request: dict,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –û–±—â–µ–Ω–∏–µ —Å –ò–ò –≤ —á–∞—Ç-—Ñ–æ—Ä–º–∞—Ç–µ
    """
    try:
        messages = request.get("messages", [])
        system_prompt = request.get("system_prompt")
        model = request.get("model", "gpt-4o-mini")
        temperature = request.get("temperature", 0.7)
        max_tokens = request.get("max_tokens", 1000)

        response = await openai_service.create_chat_completion(
            messages=messages,
            model=model,
            temperature=temperature,
            max_tokens=max_tokens,
            system_prompt=system_prompt
        )

        content = response["choices"][0]["message"]["content"]
        return {"content": content}

    except Exception as e:
        logger.error(f"Error in AI chat: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò: {str(e)}"
        )


@router.post("/analyze-calendar-sync")
async def analyze_calendar_and_goals_sync(
    request: CalendarAnalysisRequest,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    user_id: str = Depends(get_user_request_id),
):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Ü–µ–ª–µ–π (–ë–´–°–¢–†–´–ô)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Celery.
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤.
    """
    try:
        logger.info(f"Starting sync calendar analysis for user {user_id}")
        logger.info(f"Received {len(request.calendar_events)} events for analysis")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ —Å–ª–æ–≤–∞—Ä–∏
        calendar_events_dict = [event.model_dump() for event in request.calendar_events]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        result = await openai_service.analyze_calendar_and_goals(
            calendar_events=calendar_events_dict,
            user_goals=request.user_goals,
            analysis_period_days=request.analysis_period_days or 7
        )

        logger.info(f"Sync calendar analysis completed successfully for user {user_id}")
        return result

    except Exception as e:
        logger.error(f"Error in sync calendar analysis: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}"
        )


@router.post("/create-full-schedule", response_model=FullScheduleResponse)
async def create_full_schedule(
    request: FullScheduleRequest,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∏–ø—ã:
    - 'tomorrow': –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    - 'week': –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é

    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
    - ignore_existing_events: –µ—Å–ª–∏ True ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    try:
        logger.info(f"Starting full schedule creation for user {user_id}, type: {request.schedule_type}")
        logger.info(f"Received {len(request.user_goals)} goals for planning")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ (JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ)
        goals_dict = [goal.model_dump(mode='json') for goal in request.user_goals]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å (JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ)
        existing_events_dict = []
        if request.existing_events:
            existing_events_dict = [event.model_dump(mode='json') for event in request.existing_events]

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        result = await openai_service.create_full_schedule(
            schedule_type=request.schedule_type,
            user_goals=goals_dict,
            existing_events=existing_events_dict,
            work_hours_start=request.work_hours_start,
            work_hours_end=request.work_hours_end,
            break_duration_minutes=request.break_duration_minutes,
            buffer_between_events_minutes=request.buffer_between_events_minutes,
            preferences=request.preferences,
            ignore_existing_events=bool(request.ignore_existing_events)
        )

        logger.info(f"Full schedule creation completed for user {user_id}, type: {request.schedule_type}")
        return FullScheduleResponse(**result)

    except Exception as e:
        logger.error(f"Error in full schedule creation: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
        )


@router.put("/goals/{goal_id}", response_model=dict)
async def update_goal(
    goal_id: str,
    goal_data: dict,
    openai_service: Annotated[OpenAIService, Depends(get_openai_service)],
    goals_repo: Annotated[GoalsRepository, Depends(get_goals_repo)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º SMART –∞–Ω–∞–ª–∏–∑–æ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        existing_goal = await goals_repo.get_goal_by_id(user_id, goal_id)
        if not existing_goal:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        # –ü—Ä–æ–≤–æ–¥–∏–º SMART –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏
        smart_analysis = await openai_service.analyze_goal_smart(
            title=goal_data.get("title", ""),
            description=goal_data.get("description", ""),
            deadline=goal_data.get("deadline")
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫ –¥–∞–Ω–Ω—ã–º —Ü–µ–ª–∏
        goal_data["smart_analysis"] = smart_analysis

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –ë–î
        await goals_repo.update_goal(user_id, goal_id, goal_data)

        return {
            "id": goal_id,
            "message": "–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "smart_analysis": smart_analysis,
            **goal_data
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error updating goal: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: {str(e)}"
        )


@router.delete("/goals/{goal_id}")
async def delete_goal(
    goal_id: str,
    goals_repo: Annotated[GoalsRepository, Depends(get_goals_repo)],
    user_id: str = Depends(get_user_request_id)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        existing_goal = await goals_repo.get_goal_by_id(user_id, goal_id)
        if not existing_goal:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        # –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å –∏–∑ –ë–î
        await goals_repo.delete_goal(user_id, goal_id)

        return {"message": "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting goal: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: {str(e)}"
        )
